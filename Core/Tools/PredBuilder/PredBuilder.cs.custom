using System;
using System.Linq.Expressions;
namespace Core {
   public static class PredBuilder {
      public static Expression<Func<T, bool>> OrElse<T> (this Expression<Func<T, bool>> lastExp, Expression<Func<T, bool>> exp) => Expression.OrElse (lastExp.Body, exp.Body).CreateLambda<T> ();

      public static Expression<Func<T, bool>> Xor<T> (this Expression<Func<T, bool>> lastExp, Expression<Func<T, bool>> exp) => Expression.ExclusiveOr (lastExp.Body, exp.Body).CreateLambda<T> ();

      public static Expression<Func<T, bool>> AndAlso<T> (this Expression<Func<T, bool>> lastExp, Expression<Func<T, bool>> exp) => Expression.AndAlso (lastExp.Body, exp.Body).CreateLambda<T> ();

      public static Expression<Func<T, bool>> CreateWhere<T> (bool defaultConditionResult = false) => q => defaultConditionResult;

      private static Expression<Func<T, bool>> CreateLambda<T> (this Expression combined) {
         ParameterExpression param = Expression.Parameter (typeof (T), "p");
         ParameterReplacer replacer = new ParameterReplacer (param);
         combined = replacer.Visit (combined);
         var lambda = Expression.Lambda<Func<T, bool>> (combined, param);
         return lambda;
      }
      public class ParameterReplacer : ExpressionVisitor // Helper class to replace all parameters with the specified one
      {
         private readonly ParameterExpression parameter;
         internal ParameterReplacer (ParameterExpression parameter) => this.parameter = parameter;
         protected override Expression VisitParameter (ParameterExpression node) => parameter;
      }
   }
}
