// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190912062643_Add8NewTablesindustryinspectionWarningAndPollutionSection")]
    partial class Add8NewTablesindustryinspectionWarningAndPollutionSection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.AirQualityMonitoringStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContractExpireDate");

                    b.Property<double?>("ContractPrice");

                    b.Property<int?>("ContractStartDate");

                    b.Property<string>("ContractorName");

                    b.Property<string>("ContractorPhone");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<int?>("InstallationYear");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LaunchingYear");

                    b.Property<string>("ManufacturerCompany");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<bool?>("MonitoringBoard");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double?>("NeededCostsToMeetRequirements");

                    b.Property<int?>("SatisfactionLevelId");

                    b.Property<string>("SellerCompany");

                    b.Property<int?>("StationDataSendingFrequencyId");

                    b.Property<int?>("StationKeepingStatus");

                    b.Property<int?>("StationModelId");

                    b.Property<int?>("StationTypeId");

                    b.Property<int?>("StationUsageClassificationId");

                    b.Property<string>("WhyNotActiveDescription");

                    b.HasKey("Id");

                    b.HasIndex("SatisfactionLevelId");

                    b.HasIndex("StationDataSendingFrequencyId");

                    b.HasIndex("StationModelId");

                    b.HasIndex("StationTypeId");

                    b.HasIndex("StationUsageClassificationId");

                    b.ToTable("AirQualityMonitoringStations");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirQualityMonitoringStationId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("StationConsumableId");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("StationConsumableId");

                    b.ToTable("AirQualityStationConsumables");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationMeteorologicalSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirQualityMonitoringStationId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("StationMeteorologicalSystemId");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("StationMeteorologicalSystemId");

                    b.ToTable("AirQualityStationMeteorologicalSystems");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationParametersAnalyzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirQualityMonitoringStationId");

                    b.Property<int>("AirQualityMonitoringStationParameterId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("AirQualityMonitoringStationParameterId")
                        .HasName("IX_AirQualityStationParametersAnalyzers_AirQualityMonitoringSt~1");

                    b.ToTable("AirQualityStationParametersAnalyzers");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationSparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirQualityMonitoringStationId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("StationSparePartId");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("StationSparePartId");

                    b.ToTable("AirQualityStationSpareParts");
                });

            modelBuilder.Entity("Core.Entities.AmbientAirParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<double?>("MeasurementDuration");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("ParametersSamplingResultsId");

                    b.Property<double>("Quantity");

                    b.Property<string>("SamplingPlace");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("AmbientAirParametersResults");
                });

            modelBuilder.Entity("Core.Entities.ChemicalPropertiesParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IngredientId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("WastewaterId");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("WastewaterId");

                    b.ToTable("ChemicalPropertiesParameters");
                });

            modelBuilder.Entity("Core.Entities.ChimneyParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AmbientPressure");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<double?>("DioxideCarbonVolumePercentage");

                    b.Property<double?>("DryConditionDensity");

                    b.Property<double?>("DynamicPressure");

                    b.Property<double?>("EnergyLoss");

                    b.Property<double?>("EntryPointElevation");

                    b.Property<double?>("ExtraAirVolumePercentage");

                    b.Property<double?>("GasOutletDebi");

                    b.Property<double?>("InnerDiameter");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<double?>("MeasurementDuration");

                    b.Property<double?>("OutputGasSpeed");

                    b.Property<double?>("OxygenVolumePercentage");

                    b.Property<int>("ParametersSamplingResultsId");

                    b.Property<double>("Quantity");

                    b.Property<double?>("RelativeHumidity");

                    b.Property<double?>("SamplingPlaceElevation");

                    b.Property<double?>("Temperature");

                    b.Property<double?>("ThermalEfficiencyPercentage");

                    b.Property<double?>("WetConditionDensity");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("ChimneyParametersResults");
                });

            modelBuilder.Entity("Core.Entities.ChimneysInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<double?>("Diameter");

                    b.Property<double?>("Elevation");

                    b.Property<bool?>("HasSamplingGate");

                    b.Property<bool?>("IsStandardConditionsObserved");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringInfoId");

                    b.Property<int>("ReleasePollutionSourceId");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("ReleasePollutionSourceId");

                    b.ToTable("ChimneysInfo");
                });

            modelBuilder.Entity("Core.Entities.ConsumingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CmConsumptionPlacesIds");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DailyAverageProduction");

                    b.Property<int?>("DapProductionId");

                    b.Property<bool>("HasBeenImported");

                    b.Property<int?>("HsCodeId");

                    b.Property<int>("IndustryId");

                    b.Property<bool>("IsChemical");

                    b.Property<int?>("IsicCode10Id");

                    b.Property<int?>("MapProductionId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MonthlyAverageProduction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("RotterdamConventionChemicalId");

                    b.Property<int?>("YapProductionId");

                    b.Property<int?>("YearlyAverageProduction");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("RotterdamConventionChemicalId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("ConsumingMaterials");
                });

            modelBuilder.Entity("Core.Entities.DisinfectionDevicesInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveDisinfectionDevicesTotalRealCapacity");

                    b.Property<string>("AdmDescription");

                    b.Property<bool?>("AgentForRepairingDevice");

                    b.Property<int?>("AlternativeDisinfectionMethodId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DdoDescription");

                    b.Property<int?>("DeviceFailureRatePerYear");

                    b.Property<int?>("DeviceInActivityCauseId");

                    b.Property<string>("DiacDescription");

                    b.Property<int?>("DisinfectionDeviceOwnershipId");

                    b.Property<int?>("DisinfectionDeviceTimeDuration");

                    b.Property<int?>("DisinfectionMethodId");

                    b.Property<string>("DmDescription");

                    b.Property<bool?>("DoingCalibrationPerYear");

                    b.Property<string>("InstalledWasteDisinfectionDevicesModel");

                    b.Property<string>("InstalledWasteDisinfectionDevicesName");

                    b.Property<int>("MedicalCenterUnitsInfoId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<bool?>("ProcessRegistrationFeatures");

                    b.Property<int?>("SleepRateAfterEachFailurePerDay");

                    b.Property<int?>("TrainedOperatorsQuantity");

                    b.Property<bool?>("UsingBiologicalIndicators");

                    b.Property<int?>("UsingChemicalIndicators");

                    b.Property<int?>("WasteDisinfectionDeviceInstallationDate");

                    b.Property<bool?>("WasteInfectionProductionDeviceFitsCapacity");

                    b.Property<int?>("WorkingCycleQuantity");

                    b.Property<bool?>("WorkingGuidePapers");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeDisinfectionMethodId");

                    b.HasIndex("DeviceInActivityCauseId");

                    b.HasIndex("DisinfectionDeviceOwnershipId");

                    b.HasIndex("DisinfectionMethodId");

                    b.HasIndex("MedicalCenterUnitsInfoId")
                        .IsUnique();

                    b.ToTable("DisinfectionDevicesInfos");
                });

            modelBuilder.Entity("Core.Entities.EnergyConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("EcAutumnAverageConsumption");

                    b.Property<int?>("EcSpringAverageConsumption");

                    b.Property<int?>("EcSummerAverageConsumption");

                    b.Property<string>("EcSupplySourceLocationName");

                    b.Property<int?>("EcWinterAverageConsumption");

                    b.Property<int?>("GcAutumnAverageConsumption");

                    b.Property<int?>("GcSpringAverageConsumption");

                    b.Property<int?>("GcSummerAverageConsumption");

                    b.Property<string>("GcSupplySourceLocationName");

                    b.Property<int?>("GcWinterAverageConsumption");

                    b.Property<int?>("GlcAutumnAverageConsumption");

                    b.Property<int?>("GlcSpringAverageConsumption");

                    b.Property<int?>("GlcSummerAverageConsumption");

                    b.Property<string>("GlcSupplySourceLocationName");

                    b.Property<int?>("GlcWinterAverageConsumption");

                    b.Property<bool>("HasElectricityConsumption");

                    b.Property<bool>("HasGasConsumption");

                    b.Property<bool>("HasGasolineConsumption");

                    b.Property<bool>("HasMazutConsumption");

                    b.Property<int>("IndustryId");

                    b.Property<int?>("McAutumnAverageConsumption");

                    b.Property<int?>("McSpringAverageConsumption");

                    b.Property<int?>("McSummerAverageConsumption");

                    b.Property<string>("McSupplySourceLocationName");

                    b.Property<int?>("McWinterAverageConsumption");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("EnergyConsumptions");
                });

            modelBuilder.Entity("Core.Entities.EnumData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Data")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SortKey");

                    b.Property<int>("SystemType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Data");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title");

                    b.ToTable("EnumData");
                });

            modelBuilder.Entity("Core.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentsDescription");

                    b.Property<string>("CalibrationLicensePhotoFileName");

                    b.Property<int?>("CalibrationPeriodId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DeviceModel");

                    b.Property<int?>("DeviceTypeId");

                    b.Property<string>("EquipmentPhotoFileName");

                    b.Property<string>("FaultyCause");

                    b.Property<string>("FaultyCauseDescription");

                    b.Property<bool>("HasAttachments");

                    b.Property<bool>("IsDeviceHealthy");

                    b.Property<int>("LabId");

                    b.Property<int?>("LastCalibrationDate");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SerialCode");

                    b.Property<int?>("SpecialtySectionId");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationPeriodId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("LabId");

                    b.HasIndex("SpecialtySectionId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Core.Entities.GroupReciverUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("MessageId")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupReciverUsers");
                });

            modelBuilder.Entity("Core.Entities.HumanResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("EveningShiftFromHour");

                    b.Property<int?>("EveningShiftPersonnelQuantity");

                    b.Property<string>("EveningShiftToHour");

                    b.Property<bool>("HasEveningShift");

                    b.Property<bool>("HasMorningShift");

                    b.Property<bool>("HasNightShift");

                    b.Property<bool>("HasRestShift");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("MorningShiftFromHour");

                    b.Property<int?>("MorningShiftPersonnelQuantity");

                    b.Property<string>("MorningShiftToHour");

                    b.Property<string>("NightShiftFromHour");

                    b.Property<int?>("NightShiftPersonnelQuantity");

                    b.Property<string>("NightShiftToHour");

                    b.Property<int>("PersonnelTotalNumber");

                    b.Property<string>("RestShiftFromHour");

                    b.Property<int?>("RestShiftPersonnelQuantity");

                    b.Property<string>("RestShiftToHour");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("HumanResources");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyAssignedIndustries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustrialTownsSpecialtyInfoId");

                    b.Property<string>("IndustryName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialTownsSpecialtyInfoId");

                    b.ToTable("IndustrialTownsSpecialtyAssignedIndustries");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DepartmentLetterDate");

                    b.Property<int?>("DepartmentLetterNumber");

                    b.Property<bool>("HadAcceptedWastewater");

                    b.Property<int>("IndustrialTownsSpecialtyInfoId");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("RejectionDate");

                    b.Property<string>("RejectionReason");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialTownsSpecialtyInfoId");

                    b.HasIndex("IndustryId");

                    b.ToTable("IndustrialTownsSpecialtyDetails");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Area");

                    b.Property<int?>("AssignedIndustriesQuantity");

                    b.Property<string>("CommitmentsFileName");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DevelopmentPrediction");

                    b.Property<string>("EstablishedIndustryMapFileName");

                    b.Property<string>("EstablishmentGroupingIds");

                    b.Property<string>("EstablishmentZoningFileName");

                    b.Property<float?>("FuturePredictionArea");

                    b.Property<int>("IndustryHighestClassificationEstablished");

                    b.Property<int>("IndustryId");

                    b.Property<float?>("InfrastructureSpace");

                    b.Property<string>("Latitude");

                    b.Property<string>("LicenseFileName");

                    b.Property<string>("Longitude");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("UnassignedIndustriesQuantity");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("IndustrialTownsSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.IndustrialUnitsSamplingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DepartmentAlternativeLetterDate");

                    b.Property<int?>("DepartmentAlternativeLetterNumber");

                    b.Property<int?>("DepartmentLetterDate");

                    b.Property<int?>("DepartmentLetterNumber");

                    b.Property<string>("Description");

                    b.Property<int>("ExperimentReason");

                    b.Property<string>("ExperimentReasonDescription");

                    b.Property<string>("ExperimentSubject");

                    b.Property<bool>("FinalSave");

                    b.Property<DateTimeOffset?>("FinalSaveDate");

                    b.Property<bool>("HasLabPartner");

                    b.Property<string>("IndustryContractFileName");

                    b.Property<int>("IndustryId");

                    b.Property<bool?>("IsMonitoringDone");

                    b.Property<int>("LabId");

                    b.Property<int>("LabManagerVerifierId");

                    b.Property<string>("LabPartnerContractFileName");

                    b.Property<string>("LabPartnerDescription");

                    b.Property<int?>("LabPartnerId");

                    b.Property<string>("LabPartnerParametersIds");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MonitoringAlternativeDate");

                    b.Property<string>("MonitoringCancelingCause");

                    b.Property<int?>("MonitoringDate");

                    b.Property<int?>("MonitoringPeriodId");

                    b.Property<int?>("MonitoringYear");

                    b.Property<bool?>("OrganizationRepresentativeAttendance");

                    b.Property<string>("OrganizationRepresentativeAttendanceFileName");

                    b.Property<long?>("RialVolume");

                    b.Property<string>("SamplerExpertsIds");

                    b.Property<string>("SamplingExpertsDescription");

                    b.Property<string>("TechnicalAssistantVerifiersIds");

                    b.Property<string>("TestersIds");

                    b.HasKey("Id");

                    b.HasIndex("FinalSave");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LabId");

                    b.HasIndex("LabManagerVerifierId");

                    b.HasIndex("LabPartnerId");

                    b.HasIndex("MonitoringPeriodId");

                    b.ToTable("IndustrialUnitsSamplingResults");
                });

            modelBuilder.Entity("Core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClassificationId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("EstablishmentGroupingId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsWasteUsedAsRawMaterial");

                    b.Property<int?>("IsicCode10Id");

                    b.Property<int?>("IsicCodeId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("Serial");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("EstablishmentGroupingId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("IsicCodeId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingMonitoringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentFileName");

                    b.Property<int>("IndustryInspectionId");

                    b.Property<bool?>("IsMeasured");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringTypeQualityStatusId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("MonitoringTypeQualityStatusId");

                    b.ToTable("IndustryInspectingMonitoringTypes");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryInspectionId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.ToTable("IndustryInspectingPlaces");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<string>("InspectDescription");

                    b.Property<string>("InspectDocumentFileName");

                    b.Property<int?>("InspectReasonId");

                    b.Property<string>("InspectingAgendaFileName");

                    b.Property<int?>("InspectingDate");

                    b.Property<string>("InspectingExpertReportFileName");

                    b.Property<string>("InspectingHour")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InspectReasonId");

                    b.ToTable("IndustryInspections");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("IndustryInspectionId");

                    b.Property<int>("InspectorType");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Rank")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.ToTable("IndustryInspectors");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnnouncementDate");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentFileName");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("PollutionDetectionCommitteeFileName");

                    b.Property<int?>("PollutionTypeId");

                    b.Property<int?>("SeasonId");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("PollutionTypeId");

                    b.HasIndex("SeasonId");

                    b.ToTable("IndustryPollutions");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("IndustrialUnitsSamplingResultId");

                    b.Property<int?>("IndustryInspectionId");

                    b.Property<int>("IndustryPollutionId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("PollutionAnnouncementReason");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("IndustryPollutionId");

                    b.ToTable("IndustryPollutionReasons");
                });

            modelBuilder.Entity("Core.Entities.IndustryWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdministrationLetterDate");

                    b.Property<string>("AdministrationLetterNumber");

                    b.Property<int?>("CommentDate");

                    b.Property<int?>("CommittedResultPercentage");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("CrpDescription");

                    b.Property<string>("Description");

                    b.Property<int?>("FaxMailDate");

                    b.Property<int?>("GeneralAdministrationOpinionId");

                    b.Property<string>("IndustryCommittedActions");

                    b.Property<string>("IndustryCommittedActionsResult");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("PercentageTillDate");

                    b.Property<int?>("PossibleNextInspection");

                    b.Property<string>("ProgressDescription");

                    b.Property<int?>("ProgressPercentage");

                    b.Property<int?>("WarningDate");

                    b.Property<string>("WarningDocumentFileName");

                    b.HasKey("Id");

                    b.HasIndex("GeneralAdministrationOpinionId");

                    b.HasIndex("IndustryId");

                    b.ToTable("IndustryWarnings");
                });

            modelBuilder.Entity("Core.Entities.IndustryWarningReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("IndustrialUnitsSamplingResultId");

                    b.Property<int?>("IndustryInspectionId");

                    b.Property<int>("IndustryWarningId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("PreviousIndustryWarningId");

                    b.Property<int>("WarningReason");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("IndustryWarningId");

                    b.HasIndex("PreviousIndustryWarningId");

                    b.ToTable("IndustryWarningReasons");
                });

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirSoundStartedDate");

                    b.Property<int?>("BiologyStartedDate");

                    b.Property<string>("ClassificationDescription");

                    b.Property<string>("ClassificationDocumentFileName");

                    b.Property<int?>("ClassificationId");

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("EstablishedYear");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LabArea");

                    b.Property<int?>("LabPlatform");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("OtherActivity");

                    b.Property<string>("OtherActivityDescription");

                    b.Property<string>("OwnershipStatusDocumentFileName");

                    b.Property<int?>("OwnershipStatusId");

                    b.Property<int?>("PhysicsChemistryStartedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("OwnershipStatusId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Core.Entities.LabConsumingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsumableMaterialStandardClassificationId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<int?>("ExpirationDate");

                    b.Property<int>("LabId");

                    b.Property<string>("Manufacturer");

                    b.Property<int>("MeasurementUnitId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableMaterialStandardClassificationId");

                    b.HasIndex("LabId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("LabConsumingMaterials");
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("CurrentBalance");

                    b.Property<int>("DomesticatedAnimalsClassificationId");

                    b.Property<int>("LivestockSpecialtyInfoId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Race");

                    b.Property<double>("WeightAverage");

                    b.HasKey("Id");

                    b.HasIndex("DomesticatedAnimalsClassificationId");

                    b.HasIndex("LivestockSpecialtyInfoId");

                    b.ToTable("LivestockSpecialtyDetails");
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnimalWasteChemistryAnalyze");

                    b.Property<int>("AnimalWasteHoldingDuration");

                    b.Property<int>("AnimalWasteProductionAverage");

                    b.Property<string>("AnimalWasteUseageMethod");

                    b.Property<string>("BuildingMapFileName");

                    b.Property<string>("CollectionName");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DistanceFromRiver");

                    b.Property<int?>("DistanceToMainRoad");

                    b.Property<int?>("DistanceToNearestAgriculturalLand");

                    b.Property<int?>("DistanceToNearestForageCollection");

                    b.Property<int?>("DistanceToNearestSlaughterhouse");

                    b.Property<int?>("DistanceToResidentialArea");

                    b.Property<bool?>("HasHeatingSystem");

                    b.Property<string>("HeatingSystemDescription");

                    b.Property<int>("IndustryId");

                    b.Property<bool?>("IsInSensitiveCentersWindDirection");

                    b.Property<bool?>("IsInsideResidentialArea");

                    b.Property<int>("LivestockClassificationId");

                    b.Property<string>("MinistryOfAgricultureLicenseFileName");

                    b.Property<string>("MinistryOfIndustryLicenseFileName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("ScwdDescription");

                    b.Property<string>("SensitiveCentersAroundDescription");

                    b.Property<string>("SlaughterhouseName");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LivestockClassificationId");

                    b.ToTable("LivestockSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.ManufacturedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DailyAverageProduction");

                    b.Property<int?>("DapProductionId");

                    b.Property<int>("IndustryId");

                    b.Property<int?>("IsicCode10Id");

                    b.Property<int?>("MapProductionId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MonthlyAverageProduction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ProductionLineIntroduction");

                    b.Property<string>("ProductionMethod");

                    b.Property<string>("ScannerBlockDiagramFileName");

                    b.Property<int?>("YapProductionId");

                    b.Property<int?>("YearlyAverageProduction");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("ManufacturedProducts");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterSelfDeclarationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AaaNwMonthlyProductionQty");

                    b.Property<int?>("AaaSwMonthlyProductionQty");

                    b.Property<int?>("AdministrativeUnitsNwMonthlyProductionQty");

                    b.Property<int?>("AdministrativeUnitsSwMonthlyProductionQty");

                    b.Property<int?>("AudiologistsNwMonthlyProductionQty");

                    b.Property<int?>("AudiologistsSwMonthlyProductionQty");

                    b.Property<int?>("BaoNwMonthlyProductionQty");

                    b.Property<int?>("BaoSwMonthlyProductionQty");

                    b.Property<int?>("BmtNwMonthlyProductionQty");

                    b.Property<int?>("BmtSwMonthlyProductionQty");

                    b.Property<int?>("CardiacCareNwMonthlyProductionQty");

                    b.Property<int?>("CardiacCareSwMonthlyProductionQty");

                    b.Property<int?>("CardiovascularNwMonthlyProductionQty");

                    b.Property<int?>("CardiovascularSwMonthlyProductionQty");

                    b.Property<int?>("ChemotherapyNwMonthlyProductionQty");

                    b.Property<int?>("ChemotherapySwMonthlyProductionQty");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("CtScanNwMonthlyProductionQty");

                    b.Property<int?>("CtScanSwMonthlyProductionQty");

                    b.Property<int?>("DentistryNwMonthlyProductionQty");

                    b.Property<int?>("DentistrySwMonthlyProductionQty");

                    b.Property<int?>("DialysisSectionNwMonthlyProductionQty");

                    b.Property<int?>("DialysisSectionSwMonthlyProductionQty");

                    b.Property<int?>("EarnoseAndThroatNwMonthlyProductionQty");

                    b.Property<int?>("EarnoseAndThroatSwMonthlyProductionQty");

                    b.Property<int?>("EmergencyNwMonthlyProductionQty");

                    b.Property<int?>("EmergencySwMonthlyProductionQty");

                    b.Property<int?>("EndoscopicSectionNwMonthlyProductionQty");

                    b.Property<int?>("EndoscopicSectionSwMonthlyProductionQty");

                    b.Property<int?>("GeneralSurgeryNwMonthlyProductionQty");

                    b.Property<int?>("GeneralSurgerySwMonthlyProductionQty");

                    b.Property<int?>("GeneticsLaboratoryNwMonthlyProductionQty");

                    b.Property<int?>("GeneticsLaboratorySwMonthlyProductionQty");

                    b.Property<int?>("GphNwMonthlyProductionQty");

                    b.Property<int?>("GphSwMonthlyProductionQty");

                    b.Property<bool?>("HasAdministrativeUnits");

                    b.Property<bool?>("HasAngiographyAndAngioplasty");

                    b.Property<bool?>("HasAudiologists");

                    b.Property<bool?>("HasBloodAndOncology");

                    b.Property<bool?>("HasBoneMarrowTransplantation");

                    b.Property<bool?>("HasCardiacCare");

                    b.Property<bool?>("HasCardiovascular");

                    b.Property<bool?>("HasChemotherapy");

                    b.Property<bool?>("HasCtScan");

                    b.Property<bool?>("HasDentistry");

                    b.Property<bool?>("HasDialysisSection");

                    b.Property<bool?>("HasEarnoseAndThroat");

                    b.Property<bool?>("HasEmergency");

                    b.Property<bool?>("HasEndoscopicSection");

                    b.Property<bool?>("HasGeneralPublicHealth");

                    b.Property<bool?>("HasGeneralSurgery");

                    b.Property<bool?>("HasGeneticsLaboratory");

                    b.Property<bool?>("HasInfectious");

                    b.Property<bool?>("HasLaundryRoom");

                    b.Property<bool?>("HasMedicalEquipment");

                    b.Property<bool?>("HasMri");

                    b.Property<bool?>("HasNephrology");

                    b.Property<bool?>("HasNeurology");

                    b.Property<bool?>("HasNuclearMedicineDepartment");

                    b.Property<bool?>("HasNutrition");

                    b.Property<bool?>("HasOncology");

                    b.Property<bool?>("HasPainAndAnesthesia");

                    b.Property<bool?>("HasPathologyLaboratory");

                    b.Property<bool?>("HasPharmacy");

                    b.Property<bool?>("HasPhysiotherapy");

                    b.Property<bool?>("HasPsychiatry");

                    b.Property<bool?>("HasRadiology");

                    b.Property<bool?>("HasRadiotherapy");

                    b.Property<bool?>("HasSkin");

                    b.Property<bool?>("HasSonography");

                    b.Property<bool?>("HasSurgery");

                    b.Property<bool?>("HasSurgeryRoom");

                    b.Property<int>("IndustryId");

                    b.Property<int?>("InfectiousNwMonthlyProductionQty");

                    b.Property<int?>("InfectiousSwMonthlyProductionQty");

                    b.Property<int?>("LaundryRoomNwMonthlyProductionQty");

                    b.Property<int?>("LaundryRoomSwMonthlyProductionQty");

                    b.Property<int?>("MedicalEquipmentNwMonthlyProductionQty");

                    b.Property<int?>("MedicalEquipmentSwMonthlyProductionQty");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MriNwMonthlyProductionQty");

                    b.Property<int?>("MriSwMonthlyProductionQty");

                    b.Property<int?>("NephrologyNwMonthlyProductionQty");

                    b.Property<int?>("NephrologySwMonthlyProductionQty");

                    b.Property<int?>("NeurologyNwMonthlyProductionQty");

                    b.Property<int?>("NeurologySwMonthlyProductionQty");

                    b.Property<int?>("NmdNwMonthlyProductionQty");

                    b.Property<int?>("NmdSwMonthlyProductionQty");

                    b.Property<int?>("NutritionNwMonthlyProductionQty");

                    b.Property<int?>("NutritionSwMonthlyProductionQty");

                    b.Property<int?>("OncologyNwMonthlyProductionQty");

                    b.Property<int?>("OncologySwMonthlyProductionQty");

                    b.Property<int?>("PainAndAnesthesiaNwMonthlyProductionQty");

                    b.Property<int?>("PainAndAnesthesiaSwMonthlyProductionQty");

                    b.Property<int?>("PathologyLaboratoryNwMonthlyProductionQty");

                    b.Property<int?>("PathologyLaboratorySwMonthlyProductionQty");

                    b.Property<int?>("PharmacyNwMonthlyProductionQty");

                    b.Property<int?>("PharmacySwMonthlyProductionQty");

                    b.Property<int?>("PhysiotherapyNwMonthlyProductionQty");

                    b.Property<int?>("PhysiotherapySwMonthlyProductionQty");

                    b.Property<int?>("PsychiatryNwMonthlyProductionQty");

                    b.Property<int?>("PsychiatrySwMonthlyProductionQty");

                    b.Property<int?>("RadiologyNwMonthlyProductionQty");

                    b.Property<int?>("RadiologySwMonthlyProductionQty");

                    b.Property<int?>("RadiotherapyNwMonthlyProductionQty");

                    b.Property<int?>("RadiotherapySwMonthlyProductionQty");

                    b.Property<int?>("SkinNwMonthlyProductionQty");

                    b.Property<int?>("SkinSwMonthlyProductionQty");

                    b.Property<int?>("SonographyNwMonthlyProductionQty");

                    b.Property<int?>("SonographySwMonthlyProductionQty");

                    b.Property<int?>("SurgeryNwMonthlyProductionQty");

                    b.Property<int?>("SurgeryRoomNwMonthlyProductionQty");

                    b.Property<int?>("SurgeryRoomSwMonthlyProductionQty");

                    b.Property<int?>("SurgerySwMonthlyProductionQty");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MedicalCenterSelfDeclarationInfos");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsAdditionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("HealthExpertGradeId");

                    b.Property<string>("HegDescription");

                    b.Property<string>("McrtDescription");

                    b.Property<string>("McwdmDescription");

                    b.Property<int>("MedicalCenterUnitsInfoId");

                    b.Property<int?>("MedicalChemistryWastesDisposalMethodId");

                    b.Property<int?>("MedicalInfectionWastesDisposalMethodId");

                    b.Property<int?>("MedicalNormalWastesDisposalMethodId");

                    b.Property<int?>("MedicalWastesReceiverId");

                    b.Property<string>("MiwdmDescription");

                    b.Property<string>("MnwdmDescription");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MunicipalityCompanyReceivedTariffId");

                    b.Property<string>("MwrDescription");

                    b.Property<int?>("Q1");

                    b.Property<bool?>("Q10");

                    b.Property<bool?>("Q11");

                    b.Property<bool?>("Q12");

                    b.Property<bool?>("Q13");

                    b.Property<bool?>("Q14");

                    b.Property<bool?>("Q15");

                    b.Property<bool?>("Q16");

                    b.Property<bool?>("Q17");

                    b.Property<bool?>("Q18");

                    b.Property<bool?>("Q19");

                    b.Property<bool?>("Q2");

                    b.Property<bool?>("Q20");

                    b.Property<bool?>("Q21");

                    b.Property<bool?>("Q22");

                    b.Property<bool?>("Q23");

                    b.Property<bool?>("Q24");

                    b.Property<bool?>("Q25");

                    b.Property<bool?>("Q26");

                    b.Property<bool?>("Q27");

                    b.Property<bool?>("Q28");

                    b.Property<bool?>("Q29");

                    b.Property<bool?>("Q3");

                    b.Property<bool?>("Q30");

                    b.Property<bool?>("Q31");

                    b.Property<bool?>("Q32");

                    b.Property<bool?>("Q33");

                    b.Property<bool?>("Q34");

                    b.Property<bool?>("Q35");

                    b.Property<bool?>("Q36");

                    b.Property<bool?>("Q37");

                    b.Property<bool?>("Q38");

                    b.Property<bool?>("Q39");

                    b.Property<bool?>("Q4");

                    b.Property<bool?>("Q40");

                    b.Property<bool?>("Q41");

                    b.Property<bool?>("Q42");

                    b.Property<bool?>("Q43");

                    b.Property<bool?>("Q44");

                    b.Property<bool?>("Q45");

                    b.Property<bool?>("Q46");

                    b.Property<bool?>("Q47");

                    b.Property<bool?>("Q48");

                    b.Property<bool?>("Q49");

                    b.Property<bool?>("Q5");

                    b.Property<bool?>("Q50");

                    b.Property<bool?>("Q51");

                    b.Property<bool?>("Q52");

                    b.Property<int?>("Q53");

                    b.Property<int?>("Q54");

                    b.Property<int?>("Q55");

                    b.Property<int?>("Q56");

                    b.Property<int?>("Q57");

                    b.Property<int?>("Q58");

                    b.Property<int?>("Q59");

                    b.Property<bool?>("Q6");

                    b.Property<int?>("Q60");

                    b.Property<int?>("Q61");

                    b.Property<int?>("Q62");

                    b.Property<int?>("Q63");

                    b.Property<int?>("Q64");

                    b.Property<int?>("Q65");

                    b.Property<int?>("Q66");

                    b.Property<int?>("Q67");

                    b.Property<int?>("Q68");

                    b.Property<bool?>("Q69");

                    b.Property<bool?>("Q7");

                    b.Property<bool?>("Q70");

                    b.Property<bool?>("Q71");

                    b.Property<bool?>("Q72");

                    b.Property<int?>("Q73");

                    b.Property<int?>("Q74");

                    b.Property<int?>("Q75");

                    b.Property<string>("Q76");

                    b.Property<string>("Q77");

                    b.Property<int?>("Q8");

                    b.Property<bool?>("Q9");

                    b.Property<int?>("WasteHoldingMethodId");

                    b.Property<string>("WhmDescription");

                    b.HasKey("Id");

                    b.HasIndex("HealthExpertGradeId");

                    b.HasIndex("MedicalCenterUnitsInfoId")
                        .IsUnique();

                    b.HasIndex("MedicalChemistryWastesDisposalMethodId");

                    b.HasIndex("MedicalInfectionWastesDisposalMethodId");

                    b.HasIndex("MedicalNormalWastesDisposalMethodId");

                    b.HasIndex("MedicalWastesReceiverId");

                    b.HasIndex("MunicipalityCompanyReceivedTariffId");

                    b.HasIndex("WasteHoldingMethodId");

                    b.ToTable("MedicalCenterUnitsAdditionalInfos");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveBedsQuantity");

                    b.Property<int?>("ApprovedBedsQuantity");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DdsDescription");

                    b.Property<int?>("DisinfectionDeviceStatusId");

                    b.Property<int>("IndustryId");

                    b.Property<string>("McatDescription");

                    b.Property<string>("McdtDescription");

                    b.Property<int?>("MedicalCenterActivityTypeId");

                    b.Property<int?>("MedicalCenterDependencyTypeId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("WasteEstimateWaysIds");

                    b.Property<string>("WewDescription");

                    b.HasKey("Id");

                    b.HasIndex("DisinfectionDeviceStatusId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("MedicalCenterActivityTypeId");

                    b.HasIndex("MedicalCenterDependencyTypeId");

                    b.ToTable("MedicalCenterUnitsInfos");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("Direction");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("Priority");

                    b.Property<int?>("ReciverGroupId");

                    b.Property<int?>("ReciverId");

                    b.Property<int?>("SenderId");

                    b.Property<DateTimeOffset>("SentDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(500);

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("ViewDateTime");

                    b.Property<string>("body");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReciverGroupId");

                    b.HasIndex("ReciverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Entities.MonitoringCoding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AcceptedResourceId");

                    b.Property<bool?>("AllIsic10s");

                    b.Property<bool>("AllIsic4s");

                    b.Property<bool>("AllIsics");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("EstablishmentCode");

                    b.Property<int?>("FuelTypeId");

                    b.Property<string>("IsicCode10Ids");

                    b.Property<int?>("IsicCode2Id");

                    b.Property<int?>("IsicCode4Id");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringTypeId");

                    b.Property<int?>("PollutionReleaseSourceId");

                    b.Property<int?>("PrivateCodingId");

                    b.Property<int?>("WasteClassificationId");

                    b.Property<int?>("WasteNameId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("IsicCode2Id");

                    b.HasIndex("IsicCode4Id");

                    b.HasIndex("MonitoringTypeId");

                    b.HasIndex("PollutionReleaseSourceId");

                    b.HasIndex("PrivateCodingId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("MonitoringCodings");
                });

            modelBuilder.Entity("Core.Entities.MonitoringInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssessmentStatus");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MonitoringInfos");
                });

            modelBuilder.Entity("Core.Entities.MonitoringParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<double>("LimitAmountQuantity");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringCodingId");

                    b.Property<int>("ParamClassificationId");

                    b.Property<int>("ParamId");

                    b.Property<double>("PollutionLimitQuantity");

                    b.HasKey("Id");

                    b.HasIndex("LimitAmountQuantity");

                    b.HasIndex("MonitoringCodingId");

                    b.HasIndex("ParamClassificationId");

                    b.HasIndex("ParamId");

                    b.HasIndex("PollutionLimitQuantity");

                    b.ToTable("MonitoringParameters");
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyAdditionalInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DailySendingAverage");

                    b.Property<int?>("Distance");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MunicipalityWasteSpecialtyInfoId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("MunicipalityWasteSpecialtyInfoId");

                    b.ToTable("MunicipalityWasteSpecialtyAdditionalInfos");
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BuildingConstructionWasteDailyCollection");

                    b.Property<bool?>("CollectingUnsafeMedicalWaste");

                    b.Property<int?>("CoveringAreasRecyclingBoothQuantity");

                    b.Property<int?>("CoveringAreasStationedStorage");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("NotSeperatedNormalWasteDailyCollection");

                    b.Property<int?>("SafeMedicalWasteDailyCollection");

                    b.Property<int?>("SeperatedDryNormalWasteDailyCollection");

                    b.Property<int?>("SeperatedWetNormalWasteDailyCollection");

                    b.Property<int?>("UnsafeMedicalWasteDailyCollection");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MunicipalityWasteSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.NeedMonitoringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringInfoId");

                    b.Property<int>("MonitoringTypeId");

                    b.Property<bool>("NeedMonitoring");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("MonitoringTypeId");

                    b.ToTable("NeedMonitoringTypes");
                });

            modelBuilder.Entity("Core.Entities.NormalWasteInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContractExpirationDate");

                    b.Property<string>("ContractFileName");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<double?>("DailyAverageProduction");

                    b.Property<bool?>("DepotHasRoof");

                    b.Property<int?>("DepotLocationTypeId");

                    b.Property<string>("DltDescription");

                    b.Property<bool?>("HasContract");

                    b.Property<bool?>("HoldingWithIndustrialWastes");

                    b.Property<string>("HwiwDescription");

                    b.Property<bool?>("IsWasteSeparated");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("NormalWasteTransportFrequencyId");

                    b.Property<bool?>("PackagingInGoodBags");

                    b.Property<string>("PigbDescription");

                    b.Property<bool?>("TemporaryDepotLocationOrTransportCar");

                    b.Property<int?>("TemporaryHoldingStorageWithDoorQuantity");

                    b.Property<int?>("TemporaryHoldingStorageWithoutDoorQuantity");

                    b.Property<string>("TransportingCompanyName");

                    b.Property<int>("WasteId");

                    b.Property<string>("WasteTransportFinalDestination");

                    b.HasKey("Id");

                    b.HasIndex("DepotLocationTypeId");

                    b.HasIndex("NormalWasteTransportFrequencyId");

                    b.HasIndex("WasteId")
                        .IsUnique();

                    b.ToTable("NormalWasteInformations");
                });

            modelBuilder.Entity("Core.Entities.OutletWastewaters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcceptedResourceId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("HasOutletSludge");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringInfoId");

                    b.Property<string>("OutletDescription");

                    b.Property<bool?>("PossibleToTakeSamplingFromOutletSludge");

                    b.Property<int>("WastewaterId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("WastewaterId");

                    b.ToTable("OutletWastewaters");
                });

            modelBuilder.Entity("Core.Entities.ParameterAndMeasurementMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("IngredientClassificationId");

                    b.Property<int?>("IngredientId");

                    b.Property<int>("LabId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("StandardExperimentMethod")
                        .IsRequired();

                    b.Property<int>("UsingEquipmentId");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("IngredientClassificationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("LabId");

                    b.HasIndex("UsingEquipmentId");

                    b.ToTable("ParametersAndMeasurementMethods");
                });

            modelBuilder.Entity("Core.Entities.ParametersSamplingResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AcceptedResourceId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentsFileName");

                    b.Property<string>("EquipmentsIds");

                    b.Property<int?>("ExperimentDate");

                    b.Property<string>("ExperimentMethod");

                    b.Property<int?>("FuelTypeId");

                    b.Property<int>("IndustrialUnitsSamplingResultId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("MonitoringParametersId");

                    b.Property<int>("MonitoringTypeId");

                    b.Property<int?>("PollutionReleaseSourceId");

                    b.Property<int?>("SamplingDate");

                    b.Property<int?>("WasteClassificationId");

                    b.Property<int?>("WasteNameId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("MonitoringParametersId");

                    b.HasIndex("MonitoringTypeId");

                    b.HasIndex("PollutionReleaseSourceId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("ParametersSamplingResults");
                });

            modelBuilder.Entity("Core.Entities.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirSoundJobExperience");

                    b.Property<int?>("BiologyJobExperience");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DegreeOfEducationFileName");

                    b.Property<int?>("GradeId");

                    b.Property<int>("LabId");

                    b.Property<int?>("MajorId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NationalCardPhotoFileName");

                    b.Property<string>("NationalCode");

                    b.Property<string>("PersonnelHistoryFileName");

                    b.Property<int?>("PhysicsChemistryJobExperience");

                    b.Property<int?>("RankId");

                    b.Property<bool>("isExpertInAirSound");

                    b.Property<bool>("isExpertInBiology");

                    b.Property<bool>("isExpertInPhysicsChemistry");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("LabId");

                    b.HasIndex("MajorId");

                    b.HasIndex("RankId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Capacity");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<int?>("HsCodeId");

                    b.Property<int?>("IndustryId");

                    b.Property<int?>("MeasurementUnitId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DailyAverageProduction");

                    b.Property<int?>("DapProductionId");

                    b.Property<bool>("HasBeenImported");

                    b.Property<int?>("HsCodeId");

                    b.Property<int>("IndustryId");

                    b.Property<bool>("IsChemical");

                    b.Property<int?>("IsicCode10Id");

                    b.Property<int?>("MapProductionId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MonthlyAverageProduction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RmConsumptionPlacesIds");

                    b.Property<int?>("RotterdamConventionChemicalId");

                    b.Property<int?>("YapProductionId");

                    b.Property<int?>("YearlyAverageProduction");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("RotterdamConventionChemicalId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Core.Entities.RefinerySendingGasType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RefinerySpecialtyInfoId");

                    b.Property<int>("SendingGasTypeId");

                    b.HasKey("Id");

                    b.HasIndex("RefinerySpecialtyInfoId");

                    b.HasIndex("SendingGasTypeId");

                    b.ToTable("RefinerySendingGasTypes");
                });

            modelBuilder.Entity("Core.Entities.RefinerySpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CameraViewLink");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("FlareOutputTemperature");

                    b.Property<int?>("FlareTypeId");

                    b.Property<string>("FuelPitDescription");

                    b.Property<int?>("FuelPitQuantity");

                    b.Property<bool?>("HasCamera");

                    b.Property<bool?>("HasFuelPit");

                    b.Property<bool?>("HasOutputFlare");

                    b.Property<int?>("HoldingDataTimeCycle");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<double?>("SendingGasToFlareQuantity");

                    b.HasKey("Id");

                    b.HasIndex("FlareTypeId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("RefinerySpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Area");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("FireAlarm");

                    b.Property<bool>("FireFight");

                    b.Property<bool>("ImpermeableRoof");

                    b.Property<bool>("ImpermeableRoofless");

                    b.Property<int>("IndustryId");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MaintainableMaterialClassificationIds");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("RlessUnitMeasurementId");

                    b.Property<double>("RoofArea");

                    b.Property<int?>("RoofStorageSize");

                    b.Property<double>("RooflessArea");

                    b.Property<int?>("RooflessStorageSize");

                    b.Property<int?>("RssUnitMeasurementId");

                    b.Property<bool>("StandardEquipment");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("RlessUnitMeasurementId");

                    b.HasIndex("RssUnitMeasurementId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Core.Entities.RotterdamConventionChemical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassNumber");

                    b.Property<string>("Classification");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RiskIdentificationNumber");

                    b.Property<string>("Tag");

                    b.Property<string>("UnIdentityNumber");

                    b.HasKey("Id");

                    b.ToTable("RotterdamConventionChemicals");
                });

            modelBuilder.Entity("Core.Entities.SlaughterHouseSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BctDescription");

                    b.Property<string>("BmppuDescription");

                    b.Property<long>("Capacity");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DistanceFromCity");

                    b.Property<int?>("DistanceFromRiver");

                    b.Property<string>("FcnDescription");

                    b.Property<int?>("HasBloodCollectionTank");

                    b.Property<int?>("HasBloodMeatPowderProductionUnit");

                    b.Property<int?>("HasFloorChannelsNetwork");

                    b.Property<int?>("HasLivestockLossesWell");

                    b.Property<int?>("HasQuarantineUnit");

                    b.Property<int?>("HasRespectiveBloodDirectionChannel");

                    b.Property<int?>("HasSeparationCleaningViscera");

                    b.Property<int?>("HasSeparationRecyclingBlood");

                    b.Property<int?>("HasWasteBakingUnit");

                    b.Property<int>("IndustryId");

                    b.Property<bool?>("IsInSensitiveCentersWindDirection");

                    b.Property<bool?>("IsInsideCity");

                    b.Property<int>("LandTypeId");

                    b.Property<string>("LlwDescription");

                    b.Property<string>("MinistryOfAgricultureLicenseFileName");

                    b.Property<string>("MinistryOfIndustryLicenseFileName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("QuDescription");

                    b.Property<string>("RbdcDescription");

                    b.Property<string>("ScvDescription");

                    b.Property<string>("ScwdDescription");

                    b.Property<string>("SensitiveSitesAroundSlaughterhouse");

                    b.Property<int>("SlaughterHouseClassificationId");

                    b.Property<string>("SrbDescription");

                    b.Property<string>("WbuDescription");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LandTypeId");

                    b.HasIndex("SlaughterHouseClassificationId");

                    b.ToTable("SlaughterHouseSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.SoundAndWavesParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("DayOrNight");

                    b.Property<string>("Description");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<int>("ParametersSamplingResultsId");

                    b.Property<double>("Quantity");

                    b.Property<string>("SamplingPlace");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("SoundAndWavesParametersResults");
                });

            modelBuilder.Entity("Core.Entities.TemplateManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentBody");

                    b.Property<string>("ContentTitle")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("FormatedToHtmlContentBody");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("TemplateType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TemplateManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TemplateType = 2,
                            Title = "تایید مجوز نقل و انتقال پسماند"
                        },
                        new
                        {
                            Id = 2,
                            TemplateType = 3,
                            Title = "لغو مجوز نقل و انتقال پسماند"
                        },
                        new
                        {
                            Id = 3,
                            TemplateType = 4,
                            Title = "ایمیل خوش آمدگویی"
                        },
                        new
                        {
                            Id = 4,
                            TemplateType = 5,
                            Title = "ایمیل تایید حساب کاربری"
                        },
                        new
                        {
                            Id = 5,
                            TemplateType = 6,
                            Title = "پیام خوش آمدید میز کار"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailVerified");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset?>("LastLoggedIn");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<bool>("MobileVerified");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NationalCode");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("ProfileImgFileName");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTimeOffset>("RegisterDate");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(450);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.UserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTime");

                    b.Property<string>("AccessTokenHash");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTime");

                    b.Property<string>("RefreshTokenIdHash")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasMaxLength(450);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Core.Entities.Waste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AqUnitMeasurementId");

                    b.Property<int?>("AvailableQuantity");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<bool>("IsWasteRecyclingInUnit");

                    b.Property<string>("IwriuDescription");

                    b.Property<string>("MethodDescription");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ProduceFrequencyId");

                    b.Property<int?>("ProducedWasteLocationId");

                    b.Property<int?>("RealMountlyProduction");

                    b.Property<int?>("RepositoryId");

                    b.Property<int?>("RmpUnitMeasurementId");

                    b.Property<int?>("VirtualMountlyProduction");

                    b.Property<int?>("VmpUnitMeasurementId");

                    b.Property<int>("WasteCodingId");

                    b.HasKey("Id");

                    b.HasIndex("AqUnitMeasurementId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ProduceFrequencyId");

                    b.HasIndex("ProducedWasteLocationId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("RmpUnitMeasurementId");

                    b.HasIndex("VmpUnitMeasurementId");

                    b.HasIndex("WasteCodingId");

                    b.ToTable("Wastes");
                });

            modelBuilder.Entity("Core.Entities.WasteCoding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllIsic4s");

                    b.Property<bool>("AllIsics");

                    b.Property<int>("BaselABId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("HsCodeId");

                    b.Property<int>("IsicCode10Id");

                    b.Property<int?>("IsicCode2Id");

                    b.Property<int?>("IsicCode4Id");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("PrivateCodingId");

                    b.Property<string>("WasteBaselHIds");

                    b.Property<string>("WasteBaselRDIds");

                    b.Property<string>("WasteBaselYIds");

                    b.Property<int>("WasteClassificationId");

                    b.Property<int>("WasteNameId");

                    b.HasKey("Id");

                    b.HasIndex("BaselABId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("IsicCode2Id");

                    b.HasIndex("IsicCode4Id");

                    b.HasIndex("PrivateCodingId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("WasteCodings");
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("HcUnitMeasurementId");

                    b.Property<int>("HoldingCapacity");

                    b.Property<int>("IsicCode10Id");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OperationalProcessIds");

                    b.Property<int>("OverallCapacityOperationLicense");

                    b.Property<string>("RemainedWasteManagementMethod");

                    b.Property<string>("UomDescription");

                    b.Property<string>("UsingEquipments");

                    b.Property<bool?>("UsingOtherMaterial");

                    b.Property<int>("WasteManagementUnitsInfoId");

                    b.Property<bool?>("WasteRemainAfterOperationalProccess");

                    b.Property<string>("WasteResultAfterOperationalProccess");

                    b.Property<string>("WorkingMethod");

                    b.Property<string>("WraopDescription");

                    b.HasKey("Id");

                    b.HasIndex("HcUnitMeasurementId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("WasteManagementUnitsInfoId");

                    b.ToTable("WasteManagementUnitsDetails");
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<int>("LastApprovalDate");

                    b.Property<string>("LastLicensePhotoName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OperationLicensePhotoName");

                    b.Property<int>("WasteManagementUnitClassificationId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("WasteManagementUnitClassificationId");

                    b.ToTable("WasteManagementUnitsInfos");
                });

            modelBuilder.Entity("Core.Entities.WasteParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("ParamClassificationId");

                    b.Property<int>("ParamId");

                    b.Property<int>("WasteCodingId");

                    b.HasKey("Id");

                    b.HasIndex("ParamClassificationId");

                    b.HasIndex("ParamId");

                    b.HasIndex("WasteCodingId");

                    b.ToTable("WasteParameter");
                });

            modelBuilder.Entity("Core.Entities.WasteParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition");

                    b.Property<string>("Description");

                    b.Property<int>("ParametersSamplingResultsId");

                    b.Property<double>("Quantity");

                    b.Property<string>("VisualSpecs");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("WasteParametersResults");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("LabId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("PostDeadlineDate");

                    b.Property<double>("Quantity");

                    b.Property<int>("RecieverIndustryId");

                    b.Property<int>("SenderIndustryId");

                    b.Property<DateTimeOffset>("TransferRequestDate");

                    b.Property<string>("WasteAnalysisFileName");

                    b.Property<string>("WasteAnalysisResultFileName");

                    b.Property<int>("WasteId");

                    b.Property<int>("WasteTransferStatus");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("RecieverIndustryId");

                    b.HasIndex("SenderIndustryId");

                    b.HasIndex("WasteId");

                    b.ToTable("WasteTransfers");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersAdditionalIndustries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("Type");

                    b.Property<int>("WasteTransferId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersAdditionalIndustries");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersDescriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<DateTimeOffset>("DescriptionDate");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("SystemComment");

                    b.Property<string>("UserComment");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName");

                    b.Property<string>("UserType");

                    b.Property<int>("WasteTransferId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersDescriptions");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersRelatedProvinces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("ProvinceId");

                    b.Property<int>("WasteTransferId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersRelatedProvinces");
                });

            modelBuilder.Entity("Core.Entities.WasteTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool>("DesAdminAgreement");

                    b.Property<int?>("DesAdminAgreementDate");

                    b.Property<string>("DesAdminAgreementFileName");

                    b.Property<string>("Description");

                    b.Property<string>("EliminationFormFileName");

                    b.Property<string>("LoadingSupervisionAgendaFileName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("PostedDate");

                    b.Property<long?>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int?>("RecievedDate");

                    b.Property<int>("RecieverIndustryId");

                    b.Property<int?>("RequestDate");

                    b.Property<bool>("RoadTransportRegulationsObserved");

                    b.Property<string>("RtroDescription");

                    b.Property<string>("SaleInvoiceFileName");

                    b.Property<int>("SenderIndustryId");

                    b.Property<int?>("SubmissionMethodId");

                    b.Property<string>("SupervisionOverDischargeFileName");

                    b.Property<string>("WasteAnalysisFileName");

                    b.Property<int>("WasteId");

                    b.Property<int>("WasteTransportStatus");

                    b.Property<string>("WaybillFileName");

                    b.HasKey("Id");

                    b.HasIndex("RecieverIndustryId");

                    b.HasIndex("SenderIndustryId");

                    b.HasIndex("SubmissionMethodId");

                    b.HasIndex("WasteId");

                    b.ToTable("WasteTransportation");
                });

            modelBuilder.Entity("Core.Entities.WastesShipments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarSealNumber");

                    b.Property<string>("CarGpsNumber");

                    b.Property<string>("CarNumber");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DriverName");

                    b.Property<string>("DriverPhone");

                    b.Property<string>("EliminationFileName");

                    b.Property<int?>("EliminationPossibleStartDate");

                    b.Property<string>("HazardousMaterialTransportingLicenseFileName");

                    b.Property<double?>("LoadedWeight");

                    b.Property<string>("LoadingSupervisionAgendaFileName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<bool?>("RoadAccidentCommitment");

                    b.Property<bool?>("RoadTransportRegulationsObserved");

                    b.Property<bool?>("SealValidation");

                    b.Property<int>("ShipmentDate");

                    b.Property<string>("SupervisionOverDischargeFileName");

                    b.Property<string>("WasteManagementMethod");

                    b.Property<int?>("WasteReceivedDate");

                    b.Property<int>("WasteTransferId");

                    b.Property<string>("WasteTransferingCompanyName");

                    b.Property<string>("WayBillFileName");

                    b.HasKey("Id");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WastesShipments");
                });

            modelBuilder.Entity("Core.Entities.Wastewater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Bacterias");

                    b.Property<string>("BacteriasDescription");

                    b.Property<bool>("Coliforms");

                    b.Property<string>("ColiformsDescription");

                    b.Property<string>("ColorDescription");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("DailyAverageQuantity");

                    b.Property<int>("DailyMaximumQuantity");

                    b.Property<string>("DangerousPropertiesIds");

                    b.Property<int>("DaqMeasurementUnitId");

                    b.Property<string>("Description");

                    b.Property<int>("DmqMeasurementUnitId");

                    b.Property<int>("HaqMeasurementUnitId");

                    b.Property<int>("HmqMeasurementUnitId");

                    b.Property<int>("HourlyAverageQuantity");

                    b.Property<int>("HourlyMaximumQuantity");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<bool>("NeedPurificationSystem");

                    b.Property<string>("OpacityDescription");

                    b.Property<bool>("ParasitesEgg");

                    b.Property<string>("ParasitesEggDescription");

                    b.Property<bool>("Pathogens");

                    b.Property<string>("PathogensDescription");

                    b.Property<string>("SmellDescription");

                    b.Property<string>("SolidsDescription");

                    b.Property<string>("TemperatureDescription");

                    b.Property<string>("WastewaterCombinationClassificationIds");

                    b.Property<int>("WastewaterProductionReleaseTypeId");

                    b.Property<int>("WastewaterPurificationSystem");

                    b.Property<int>("WastewaterTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DaqMeasurementUnitId");

                    b.HasIndex("DmqMeasurementUnitId");

                    b.HasIndex("HaqMeasurementUnitId");

                    b.HasIndex("HmqMeasurementUnitId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("WastewaterProductionReleaseTypeId");

                    b.HasIndex("WastewaterTypeId");

                    b.ToTable("Wastewaters");
                });

            modelBuilder.Entity("Core.Entities.WastewaterDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("DailyQuantityMc2");

                    b.Property<string>("DepositAreaLatitude");

                    b.Property<string>("DepositAreaLongitude");

                    b.Property<string>("Description");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NameAndDescription");

                    b.Property<int>("WastewaterDisposalMethod");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("WastewaterDisposals");
                });

            modelBuilder.Entity("Core.Entities.WastewaterParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Debi");

                    b.Property<string>("Description");

                    b.Property<int>("ParametersSamplingResultsId");

                    b.Property<double>("Quantity");

                    b.Property<string>("VisualSpecs");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("WastewaterParametersResults");
                });

            modelBuilder.Entity("Core.Entities.WaterConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("CvAutumnAverageConsumption");

                    b.Property<int?>("CvSpringAverageConsumption");

                    b.Property<int?>("CvSummerAverageConsumption");

                    b.Property<string>("CvSupplySourceLocationName");

                    b.Property<int?>("CvWinterAverageConsumption");

                    b.Property<string>("CwConsumptionPlacesIds");

                    b.Property<int?>("GwAutumnAverageConsumption");

                    b.Property<string>("GwConsumptionPlacesIds");

                    b.Property<int?>("GwSpringAverageConsumption");

                    b.Property<int?>("GwSummerAverageConsumption");

                    b.Property<string>("GwSupplySourceLocationName");

                    b.Property<int?>("GwWinterAverageConsumption");

                    b.Property<bool>("HasCityOrVillageWater");

                    b.Property<bool>("HasGroundWater");

                    b.Property<bool>("HasSeaWater");

                    b.Property<bool>("HasSurfaceWater");

                    b.Property<int>("IndustryId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("SeawAutumnAverageConsumption");

                    b.Property<string>("SeawConsumptionPlacesIds");

                    b.Property<int?>("SeawSpringAverageConsumption");

                    b.Property<int?>("SeawSummerAverageConsumption");

                    b.Property<string>("SeawSupplySourceLocationName");

                    b.Property<int?>("SeawWinterAverageConsumption");

                    b.Property<int?>("SwAutumnAverageConsumption");

                    b.Property<string>("SwConsumptionPlacesIds");

                    b.Property<int?>("SwSpringAverageConsumption");

                    b.Property<int?>("SwSummerAverageConsumption");

                    b.Property<string>("SwSupplySourceLocationName");

                    b.Property<int?>("SwWinterAverageConsumption");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("WaterConsumptions");
                });

            modelBuilder.Entity("Core.Entities.WwHasPurificationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalSludgeStorageTankDescription");

                    b.Property<string>("AerationPondDescription");

                    b.Property<string>("AnaerobicPondsDescription");

                    b.Property<string>("BalancingDescription");

                    b.Property<string>("ClearerDescription");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DailyRawSludgeOutputQuantity");

                    b.Property<string>("DeaeratorDescription");

                    b.Property<string>("DeaeratorType");

                    b.Property<string>("DisinfectionDescription");

                    b.Property<int?>("DrsoqMeasurementUnitId");

                    b.Property<string>("EvaporationPondsDescription");

                    b.Property<string>("FilterationDescription");

                    b.Property<string>("FlowmeterDescription");

                    b.Property<string>("GreaseTrapDescription");

                    b.Property<string>("GreaseTrapType");

                    b.Property<string>("GritChamberDescription");

                    b.Property<bool?>("HasAdditionalSludgeStorageTank");

                    b.Property<bool?>("HasAerationPond");

                    b.Property<bool?>("HasAnaerobicPonds");

                    b.Property<bool?>("HasBalancing");

                    b.Property<bool?>("HasClearer");

                    b.Property<bool?>("HasDeaerator");

                    b.Property<bool?>("HasDisinfection");

                    b.Property<bool?>("HasEvaporationPonds");

                    b.Property<bool?>("HasFilteration");

                    b.Property<bool?>("HasFlowmeter");

                    b.Property<bool?>("HasGreaseTrap");

                    b.Property<bool?>("HasGritChamber");

                    b.Property<bool?>("HasOutputGasWashingTank");

                    b.Property<bool?>("HasPolyethyleneTanks");

                    b.Property<bool?>("HasPressFilter");

                    b.Property<bool?>("HasPrimarySedimentationPond");

                    b.Property<bool?>("HasRefinedWastewaterStorageTank");

                    b.Property<bool?>("HasReturningSludgePumpStation");

                    b.Property<bool?>("HasReverseOsmosis");

                    b.Property<bool?>("HasScreen");

                    b.Property<bool?>("HasSecondarySedimentationPond");

                    b.Property<bool?>("HasSepticTank");

                    b.Property<bool?>("HasSharpMixingPond");

                    b.Property<bool?>("HasSlowMixingPond");

                    b.Property<bool?>("HasSludgeCollectionUnit");

                    b.Property<bool?>("HasSludgeCondenser");

                    b.Property<bool?>("HasSludgeDigester");

                    b.Property<bool?>("HasSludgePurification");

                    b.Property<bool?>("HasWastewaterCollectionNetwork");

                    b.Property<string>("HoldingCompanyName");

                    b.Property<bool?>("IsWastedAndRecorded");

                    b.Property<string>("ManufacturerCompanyName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("MonthlyRawSludgeOutputQuantity");

                    b.Property<int?>("MrsoqMeasurementUnitId");

                    b.Property<string>("OutputGasWashingTankDescription");

                    b.Property<string>("PlanSiteFileName");

                    b.Property<string>("PolyethyleneTanksDescription");

                    b.Property<string>("PolyethyleneTanksType");

                    b.Property<string>("PressFilterDescription");

                    b.Property<string>("PressFilterType");

                    b.Property<string>("PrimarySedimentationPondDescription");

                    b.Property<string>("PurificationQualityQuantityBasics");

                    b.Property<bool?>("PurificationSystemIsActive");

                    b.Property<string>("RawSludgeAnalyzeResult");

                    b.Property<bool?>("RawSludgeHasDangerous");

                    b.Property<string>("RawSludgeHasDangerousPropertiesIds");

                    b.Property<bool?>("RawSludgeNature");

                    b.Property<string>("RefinedSludgeAnalyzeResult");

                    b.Property<string>("RefinedWastewaterStorageTankDescription");

                    b.Property<string>("RefineryHydraulicPlanFileName");

                    b.Property<string>("RefineryOutputAnalyzeResult");

                    b.Property<int?>("RefineryOutputAnalyzeResultDate");

                    b.Property<string>("ReturningSludgePumpStationDescription");

                    b.Property<string>("ReverseOsmosisDescription");

                    b.Property<string>("ScreenDescription");

                    b.Property<string>("SecondarySedimentationPondDescription");

                    b.Property<string>("SepticTankDescription");

                    b.Property<string>("SepticTankType");

                    b.Property<string>("SharpMixingPondDescription");

                    b.Property<string>("SlowMixingPondDescription");

                    b.Property<int?>("SludgeCollectionMeasurementUnitId");

                    b.Property<int?>("SludgeCollectionUnitCapacity");

                    b.Property<string>("SludgeCondenserDescription");

                    b.Property<string>("SludgeDigesterDescription");

                    b.Property<string>("SludgePurificationDescription");

                    b.Property<int?>("SuvMeasurementUnitId");

                    b.Property<long?>("SystemBuildCost");

                    b.Property<string>("SystemEstablishedYear");

                    b.Property<string>("SystemUpgradeYear");

                    b.Property<int?>("SystemUsageValue");

                    b.Property<bool?>("UsedForBiologicalFertilizer");

                    b.Property<string>("WastewaterCollectionNetworkDescription");

                    b.Property<int>("WastewaterId");

                    b.Property<string>("WastewaterPurificationSystemTypeIds");

                    b.Property<int?>("YearlyRawSludgeOutputQuantity");

                    b.Property<int?>("YrsoqMeasurementUnitId");

                    b.HasKey("Id");

                    b.HasIndex("DrsoqMeasurementUnitId");

                    b.HasIndex("MrsoqMeasurementUnitId");

                    b.HasIndex("SludgeCollectionMeasurementUnitId");

                    b.HasIndex("SuvMeasurementUnitId");

                    b.HasIndex("WastewaterId")
                        .IsUnique();

                    b.HasIndex("YrsoqMeasurementUnitId");

                    b.ToTable("WwHasPurificationSystems");
                });

            modelBuilder.Entity("Core.Entities.WwUseMotherPurificationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DepositAreaLatitude");

                    b.Property<string>("DepositAreaLongitude");

                    b.Property<int>("DistanceToMotherPurificationSystem");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("MotherPurificationSystemName");

                    b.Property<int>("WastewaterId");

                    b.HasKey("Id");

                    b.HasIndex("WastewaterId")
                        .IsUnique();

                    b.ToTable("WwUseMotherPurificationSystems");
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Core.Entities.AirQualityMonitoringStation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "SatisfactionLevel")
                        .WithMany()
                        .HasForeignKey("SatisfactionLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationDataSendingFrequency")
                        .WithMany()
                        .HasForeignKey("StationDataSendingFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationModel")
                        .WithMany()
                        .HasForeignKey("StationModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationType")
                        .WithMany()
                        .HasForeignKey("StationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationUsageClassification")
                        .WithMany()
                        .HasForeignKey("StationUsageClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "StationAddress", b1 =>
                        {
                            b1.Property<int>("AirQualityMonitoringStationId");

                            b1.Property<string>("AddressDetails");

                            b1.Property<int?>("CityId");

                            b1.Property<int?>("DistanceToCity");

                            b1.Property<string>("Elevation");

                            b1.Property<string>("Email");

                            b1.Property<string>("IndustrialTown");

                            b1.Property<bool?>("IsInTownEnv");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("Phone");

                            b1.Property<int?>("ProvinceId");

                            b1.Property<int?>("StateId");

                            b1.Property<string>("WebSite");

                            b1.HasKey("AirQualityMonitoringStationId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("AirQualityMonitoringStation_Addresses");

                            b1.HasOne("Core.Entities.AirQualityMonitoringStation")
                                .WithOne("StationAddress")
                                .HasForeignKey("Core.Entities.Address", "AirQualityMonitoringStationId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("AirQualityMonitoringStationId");

                            b1.Property<string>("Email");

                            b1.Property<string>("FullName");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("NationalCode");

                            b1.Property<string>("Phone");

                            b1.Property<string>("WebSite");

                            b1.HasKey("AirQualityMonitoringStationId");

                            b1.ToTable("AirQualityMonitoringStation_Managers");

                            b1.HasOne("Core.Entities.AirQualityMonitoringStation")
                                .WithOne("Manager")
                                .HasForeignKey("Core.Entities.Person", "AirQualityMonitoringStationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationConsumable", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationConsumables")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "StationConsumable")
                        .WithMany()
                        .HasForeignKey("StationConsumableId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationMeteorologicalSystem", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationMeteorologicalSystems")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "StationMeteorologicalSystem")
                        .WithMany()
                        .HasForeignKey("StationMeteorologicalSystemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationParametersAnalyzer", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationParametersAnalyzers")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "AirQualityMonitoringStationParameter")
                        .WithMany()
                        .HasForeignKey("AirQualityMonitoringStationParameterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationSparePart", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationSpareParts")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "StationSparePart")
                        .WithMany()
                        .HasForeignKey("StationSparePartId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.AmbientAirParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("AmbientAirParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.ChemicalPropertiesParameters", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithMany("ChemicalPropertiesParameters")
                        .HasForeignKey("WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.ChimneyParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("ChimneyParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.ChimneysInfo", b =>
                {
                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("ChimneysInfo")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "ReleasePollutionSource")
                        .WithMany()
                        .HasForeignKey("ReleasePollutionSourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ConsumingMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("ConsumingMaterials")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.RotterdamConventionChemical", "RotterdamConventionChemical")
                        .WithMany()
                        .HasForeignKey("RotterdamConventionChemicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.DisinfectionDevicesInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AlternativeDisinfectionMethod")
                        .WithMany()
                        .HasForeignKey("AlternativeDisinfectionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DeviceInActivityCause")
                        .WithMany()
                        .HasForeignKey("DeviceInActivityCauseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceOwnership")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceOwnershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DisinfectionMethod")
                        .WithMany()
                        .HasForeignKey("DisinfectionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.MedicalCenterUnitsInfo", "MedicalCenterUnitsInfo")
                        .WithOne("DisinfectionDevicesInfo")
                        .HasForeignKey("Core.Entities.DisinfectionDevicesInfo", "MedicalCenterUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.EnergyConsumption", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("EnergyConsumption")
                        .HasForeignKey("Core.Entities.EnergyConsumption", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.EnumData", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Equipment", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "CalibrationPeriod")
                        .WithMany()
                        .HasForeignKey("CalibrationPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("Equipments")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "SpecialtySection")
                        .WithMany()
                        .HasForeignKey("SpecialtySectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.GroupReciverUser", b =>
                {
                    b.HasOne("Core.Entities.Message", "Message")
                        .WithMany("GroupReciverUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.HumanResource", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("HumanResource")
                        .HasForeignKey("Core.Entities.HumanResource", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyAssignedIndustries", b =>
                {
                    b.HasOne("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustrialTownsSpecialtyInfo")
                        .WithMany("IndustrialTownsSpecialtyAssignedIndustries")
                        .HasForeignKey("IndustrialTownsSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyDetails", b =>
                {
                    b.HasOne("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustrialTownsSpecialtyInfo")
                        .WithMany("IndustrialTownsSpecialtyDetails")
                        .HasForeignKey("IndustrialTownsSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("IndustrialTownsSpecialtyInfo")
                        .HasForeignKey("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustrialUnitsSamplingResult", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("IndustrialUnitsSamplingResults")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Personnel", "LabManagerVerifier")
                        .WithMany()
                        .HasForeignKey("LabManagerVerifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "LabPartner")
                        .WithMany()
                        .HasForeignKey("LabPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MonitoringPeriod")
                        .WithMany()
                        .HasForeignKey("MonitoringPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Industry", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "EstablishmentGrouping")
                        .WithMany()
                        .HasForeignKey("EstablishmentGroupingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode")
                        .WithMany()
                        .HasForeignKey("IsicCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.License", "License", b1 =>
                        {
                            b1.Property<int>("IndustryId");

                            b1.Property<string>("CreatedByBrowserName")
                                .HasMaxLength(1000);

                            b1.Property<string>("CreatedByIp")
                                .HasMaxLength(255);

                            b1.Property<int?>("CreatedByUserId");

                            b1.Property<DateTimeOffset?>("CreatedDateTime");

                            b1.Property<int?>("LicenseDate");

                            b1.Property<string>("ModifiedByBrowserName")
                                .HasMaxLength(1000);

                            b1.Property<string>("ModifiedByIp")
                                .HasMaxLength(255);

                            b1.Property<int?>("ModifiedByUserId");

                            b1.Property<DateTimeOffset?>("ModifiedDateTime");

                            b1.Property<string>("Number");

                            b1.Property<int?>("TypeNameId");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("TypeNameId");

                            b1.ToTable("Industry_License");

                            b1.HasOne("Core.Entities.Industry")
                                .WithOne("License")
                                .HasForeignKey("Core.Entities.License", "IndustryId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Core.Entities.EnumData", "TypeName")
                                .WithMany()
                                .HasForeignKey("TypeNameId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Address", "CentralOfficeAddress", b1 =>
                        {
                            b1.Property<int>("IndustryId");

                            b1.Property<string>("AddressDetails");

                            b1.Property<int?>("CityId");

                            b1.Property<int?>("DistanceToCity");

                            b1.Property<string>("Elevation");

                            b1.Property<string>("Email");

                            b1.Property<string>("IndustrialTown");

                            b1.Property<bool?>("IsInTownEnv");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("Phone");

                            b1.Property<int?>("ProvinceId");

                            b1.Property<int?>("StateId");

                            b1.Property<string>("WebSite");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Industry_OfficeAddresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.Industry")
                                .WithOne("CentralOfficeAddress")
                                .HasForeignKey("Core.Entities.Address", "IndustryId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Address", "WorkshopAddress", b1 =>
                        {
                            b1.Property<int>("IndustryId");

                            b1.Property<string>("AddressDetails");

                            b1.Property<int?>("CityId");

                            b1.Property<int?>("DistanceToCity");

                            b1.Property<string>("Elevation");

                            b1.Property<string>("Email");

                            b1.Property<string>("IndustrialTown");

                            b1.Property<bool?>("IsInTownEnv");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("Phone");

                            b1.Property<int?>("ProvinceId");

                            b1.Property<int?>("StateId");

                            b1.Property<string>("WebSite");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Industry_WorkshopAddresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.Industry")
                                .WithOne("WorkshopAddress")
                                .HasForeignKey("Core.Entities.Address", "IndustryId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("IndustryId");

                            b1.Property<string>("Email");

                            b1.Property<string>("FullName");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("NationalCode");

                            b1.Property<string>("Phone");

                            b1.Property<string>("WebSite");

                            b1.HasKey("IndustryId");

                            b1.ToTable("Industry_Managers");

                            b1.HasOne("Core.Entities.Industry")
                                .WithOne("Manager")
                                .HasForeignKey("Core.Entities.Person", "IndustryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingMonitoringTypes", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("InspectingMonitoringTypes")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "MonitoringTypeQualityStatus")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeQualityStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingPlaces", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("Places")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustryInspection", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryInspections")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "InspectReason")
                        .WithMany()
                        .HasForeignKey("InspectReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectors", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("Inspectors")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustryPollution", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryPollutions")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "PollutionType")
                        .WithMany()
                        .HasForeignKey("PollutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionReasons", b =>
                {
                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany()
                        .HasForeignKey("IndustrialUnitsSamplingResultId");

                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany()
                        .HasForeignKey("IndustryInspectionId");

                    b.HasOne("Core.Entities.IndustryPollution", "IndustryPollution")
                        .WithMany("PollutionReasons")
                        .HasForeignKey("IndustryPollutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustryWarning", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "GeneralAdministrationOpinion")
                        .WithMany()
                        .HasForeignKey("GeneralAdministrationOpinionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryWarnings")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.IndustryWarningReasons", b =>
                {
                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany()
                        .HasForeignKey("IndustrialUnitsSamplingResultId");

                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany()
                        .HasForeignKey("IndustryInspectionId");

                    b.HasOne("Core.Entities.IndustryWarning", "IndustryWarning")
                        .WithMany("WarningReasons")
                        .HasForeignKey("IndustryWarningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.IndustryWarning", "PreviousIndustryWarning")
                        .WithMany()
                        .HasForeignKey("PreviousIndustryWarningId");
                });

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "OwnershipStatus")
                        .WithMany()
                        .HasForeignKey("OwnershipStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "LabAddress", b1 =>
                        {
                            b1.Property<int>("LabId");

                            b1.Property<string>("AddressDetails");

                            b1.Property<int?>("CityId");

                            b1.Property<int?>("DistanceToCity");

                            b1.Property<string>("Elevation");

                            b1.Property<string>("Email");

                            b1.Property<string>("IndustrialTown");

                            b1.Property<bool?>("IsInTownEnv");

                            b1.Property<string>("Latitude");

                            b1.Property<string>("Longitude");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("Phone");

                            b1.Property<int?>("ProvinceId");

                            b1.Property<int?>("StateId");

                            b1.Property<string>("WebSite");

                            b1.HasKey("LabId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Lab_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.Lab")
                                .WithOne("LabAddress")
                                .HasForeignKey("Core.Entities.Address", "LabId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("LabId");

                            b1.Property<string>("Email");

                            b1.Property<string>("FullName");

                            b1.Property<string>("Mobile");

                            b1.Property<string>("NationalCode");

                            b1.Property<string>("Phone");

                            b1.Property<string>("WebSite");

                            b1.HasKey("LabId");

                            b1.ToTable("Lab_Managers");

                            b1.HasOne("Core.Entities.Lab")
                                .WithOne("Manager")
                                .HasForeignKey("Core.Entities.Person", "LabId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Core.Entities.LabConsumingMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "ConsumableMaterialStandardClassification")
                        .WithMany()
                        .HasForeignKey("ConsumableMaterialStandardClassificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("LabConsumingMaterials")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyDetails", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DomesticatedAnimalsClassification")
                        .WithMany()
                        .HasForeignKey("DomesticatedAnimalsClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.LivestockSpecialtyInfo", "LivestockSpecialtyInfo")
                        .WithMany("LivestockSpecialtyDetails")
                        .HasForeignKey("LivestockSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("LivestockSpecialtyInfo")
                        .HasForeignKey("Core.Entities.LivestockSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "LivestockClassification")
                        .WithMany()
                        .HasForeignKey("LivestockClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ManufacturedProduct", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("ManufacturedProducts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterSelfDeclarationInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MedicalCenterSelfDeclarationInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterSelfDeclarationInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsAdditionalInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HealthExpertGrade")
                        .WithMany()
                        .HasForeignKey("HealthExpertGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.MedicalCenterUnitsInfo", "MedicalCenterUnitsInfo")
                        .WithOne("MedicalCenterUnitsAdditionalInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterUnitsAdditionalInfo", "MedicalCenterUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "MedicalChemistryWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalChemistryWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalInfectionWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalInfectionWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalNormalWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalNormalWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalWastesReceiver")
                        .WithMany()
                        .HasForeignKey("MedicalWastesReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MunicipalityCompanyReceivedTariff")
                        .WithMany()
                        .HasForeignKey("MunicipalityCompanyReceivedTariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteHoldingMethod")
                        .WithMany()
                        .HasForeignKey("WasteHoldingMethodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceStatus")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MedicalCenterUnitsInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterUnitsInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "MedicalCenterActivityType")
                        .WithMany()
                        .HasForeignKey("MedicalCenterActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalCenterDependencyType")
                        .WithMany()
                        .HasForeignKey("MedicalCenterDependencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.HasOne("Core.Entities.Group", "ReciverGroup")
                        .WithMany()
                        .HasForeignKey("ReciverGroupId");

                    b.HasOne("Core.Entities.User", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Core.Entities.MonitoringCoding", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode2")
                        .WithMany()
                        .HasForeignKey("IsicCode2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode4")
                        .WithMany()
                        .HasForeignKey("IsicCode4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "PollutionReleaseSource")
                        .WithMany()
                        .HasForeignKey("PollutionReleaseSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "PrivateCoding")
                        .WithMany()
                        .HasForeignKey("PrivateCodingId");

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MonitoringInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MonitoringInfo")
                        .HasForeignKey("Core.Entities.MonitoringInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.MonitoringParameters", b =>
                {
                    b.HasOne("Core.Entities.MonitoringCoding", "MonitoringCoding")
                        .WithMany("MonitoringParameters")
                        .HasForeignKey("MonitoringCodingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "ParamClassification")
                        .WithMany()
                        .HasForeignKey("ParamClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyAdditionalInfos", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.MunicipalityWasteSpecialtyInfo", "MunicipalityWasteSpecialtyInfo")
                        .WithMany("RelatedIndustries")
                        .HasForeignKey("MunicipalityWasteSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MunicipalityWasteSpecialtyInfo")
                        .HasForeignKey("Core.Entities.MunicipalityWasteSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.NeedMonitoringTypes", b =>
                {
                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("NeedMonitoringTypes")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.NormalWasteInformation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DepotLocationType")
                        .WithMany()
                        .HasForeignKey("DepotLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "NormalWasteTransportFrequency")
                        .WithMany()
                        .HasForeignKey("NormalWasteTransportFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Waste", "Waste")
                        .WithOne("NormalWasteInformation")
                        .HasForeignKey("Core.Entities.NormalWasteInformation", "WasteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.OutletWastewaters", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("OutletWastewaters")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithMany()
                        .HasForeignKey("WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.ParameterAndMeasurementMethod", b =>
                {
                    b.HasOne("Core.Entities.Equipment")
                        .WithMany("ParametersAndMeasurementMethods")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Core.Entities.EnumData", "IngredientClassification")
                        .WithMany()
                        .HasForeignKey("IngredientClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("ParametersAndMeasurementMethods")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Equipment", "UsingEquipment")
                        .WithMany()
                        .HasForeignKey("UsingEquipmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ParametersSamplingResults", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany("ParametersSamplingResults")
                        .HasForeignKey("IndustrialUnitsSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.MonitoringParameters", "MonitoringParameters")
                        .WithMany()
                        .HasForeignKey("MonitoringParametersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "PollutionReleaseSource")
                        .WithMany()
                        .HasForeignKey("PollutionReleaseSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Personnel", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("Personnels")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Products")
                        .HasForeignKey("IndustryId");

                    b.HasOne("Core.Entities.EnumData", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RawMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("RawMaterials")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.RotterdamConventionChemical", "RotterdamConventionChemical")
                        .WithMany()
                        .HasForeignKey("RotterdamConventionChemicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RefinerySendingGasType", b =>
                {
                    b.HasOne("Core.Entities.RefinerySpecialtyInfo", "RefinerySpecialtyInfo")
                        .WithMany("RefinerySendingGasTypes")
                        .HasForeignKey("RefinerySpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "SendingGasType")
                        .WithMany()
                        .HasForeignKey("SendingGasTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RefinerySpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "FlareType")
                        .WithMany()
                        .HasForeignKey("FlareTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("RefinerySpecialtyInfo")
                        .HasForeignKey("Core.Entities.RefinerySpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Repository", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Repositories")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "RlessUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RlessUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "RssUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RssUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RoleClaim", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.SlaughterHouseSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("SlaughterHouseSpecialtyInfo")
                        .HasForeignKey("Core.Entities.SlaughterHouseSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "LandType")
                        .WithMany()
                        .HasForeignKey("LandTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "SlaughterHouseClassification")
                        .WithMany()
                        .HasForeignKey("SlaughterHouseClassificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.SoundAndWavesParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("SoundAndWavesParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.TemplateManager", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.UserGroup", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.UserToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Waste", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AqUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("AqUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Wastes")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "ProduceFrequency")
                        .WithMany()
                        .HasForeignKey("ProduceFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ProducedWasteLocation")
                        .WithMany()
                        .HasForeignKey("ProducedWasteLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId");

                    b.HasOne("Core.Entities.EnumData", "RmpUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RmpUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "VmpUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("VmpUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.WasteCoding", "WasteCoding")
                        .WithMany("Wastes")
                        .HasForeignKey("WasteCodingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteCoding", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "BaselAB")
                        .WithMany()
                        .HasForeignKey("BaselABId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode2")
                        .WithMany()
                        .HasForeignKey("IsicCode2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode4")
                        .WithMany()
                        .HasForeignKey("IsicCode4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "PrivateCoding")
                        .WithMany()
                        .HasForeignKey("PrivateCodingId");

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsDetails", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HcUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("HcUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.WasteManagementUnitsInfo", "WasteManagementUnitsInfo")
                        .WithMany("SupportedIsics10")
                        .HasForeignKey("WasteManagementUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("WasteManagementUnit")
                        .HasForeignKey("Core.Entities.WasteManagementUnitsInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "WasteManagementUnitClassification")
                        .WithMany()
                        .HasForeignKey("WasteManagementUnitClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WasteParameter", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "ParamClassification")
                        .WithMany()
                        .HasForeignKey("ParamClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.WasteCoding", "WasteCoding")
                        .WithMany("WasteParameters")
                        .HasForeignKey("WasteCodingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("WasteParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteTransfer", b =>
                {
                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "RecieverIndustry")
                        .WithMany()
                        .HasForeignKey("RecieverIndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "SenderIndustry")
                        .WithMany()
                        .HasForeignKey("SenderIndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersAdditionalIndustries", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WasteTransfersAdditionalIndustries")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersDescriptions", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WasteTransfersDescriptions")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersRelatedProvinces", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("RelatedProvinces")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WasteTransport", b =>
                {
                    b.HasOne("Core.Entities.Industry", "RecieverIndustry")
                        .WithMany()
                        .HasForeignKey("RecieverIndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "SenderIndustry")
                        .WithMany()
                        .HasForeignKey("SenderIndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "SubmissionMethod")
                        .WithMany()
                        .HasForeignKey("SubmissionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WastesShipments", b =>
                {
                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WastesShipments")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Wastewater", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DaqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DaqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DmqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DmqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HaqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("HaqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HmqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("HmqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Wastewaters")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "WastewaterProductionReleaseType")
                        .WithMany()
                        .HasForeignKey("WastewaterProductionReleaseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WastewaterType")
                        .WithMany()
                        .HasForeignKey("WastewaterTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WastewaterDisposal", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("WastewaterDisposals")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WastewaterParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("WastewaterParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WaterConsumption", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("WaterConsumption")
                        .HasForeignKey("Core.Entities.WaterConsumption", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.WwHasPurificationSystems", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "SludgeCollectionMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("SludgeCollectionMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "SuvMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("SuvMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithOne("WwHasPurificationSystem")
                        .HasForeignKey("Core.Entities.WwHasPurificationSystems", "WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.EnumData", "YrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("YrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WwUseMotherPurificationSystems", b =>
                {
                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithOne("WwUseMotherPurificationSystem")
                        .HasForeignKey("Core.Entities.WwUseMotherPurificationSystems", "WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
