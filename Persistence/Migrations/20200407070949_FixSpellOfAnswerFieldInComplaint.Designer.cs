// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200407070949_FixSpellOfAnswerFieldInComplaint")]
    partial class FixSpellOfAnswerFieldInComplaint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.AirQualityMonitoringStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContractExpireDate")
                        .HasColumnType("int");

                    b.Property<double?>("ContractPrice")
                        .HasColumnType("double");

                    b.Property<int?>("ContractStartDate")
                        .HasColumnType("int");

                    b.Property<string>("ContractorName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContractorPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("InstallationYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LaunchingYear")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCompany")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("MonitoringBoard")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("NeededCostsToMeetRequirements")
                        .HasColumnType("double");

                    b.Property<int?>("SatisfactionLevelId")
                        .HasColumnType("int");

                    b.Property<string>("SellerCompany")
                        .HasColumnType("longtext");

                    b.Property<int?>("StationDataSendingFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("StationKeepingStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StationModelId")
                        .HasColumnType("int");

                    b.Property<int?>("StationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StationUsageClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("WhyNotActiveDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SatisfactionLevelId");

                    b.HasIndex("StationDataSendingFrequencyId");

                    b.HasIndex("StationModelId");

                    b.HasIndex("StationTypeId");

                    b.HasIndex("StationUsageClassificationId");

                    b.ToTable("AirQualityMonitoringStations");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirQualityStationParametersAnalyzerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationConsumableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityStationParametersAnalyzerId");

                    b.HasIndex("StationConsumableId");

                    b.ToTable("AirQualityStationConsumables");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationMeteorologicalSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirQualityMonitoringStationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationMeteorologicalSystemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("StationMeteorologicalSystemId");

                    b.ToTable("AirQualityStationMeteorologicalSystems");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationParametersAnalyzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirQualityMonitoringStationId")
                        .HasColumnType("int");

                    b.Property<int>("AirQualityMonitoringStationParameterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityMonitoringStationId");

                    b.HasIndex("AirQualityMonitoringStationParameterId")
                        .HasName("IX_AirQualityStationParametersAnalyzers_AirQualityMonitoringSt~1");

                    b.ToTable("AirQualityStationParametersAnalyzers");
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationSparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirQualityStationParametersAnalyzerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationSparePartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirQualityStationParametersAnalyzerId");

                    b.HasIndex("StationSparePartId");

                    b.ToTable("AirQualityStationSpareParts");
                });

            modelBuilder.Entity("Core.Entities.AmbientAirParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<double?>("MeasurementDuration")
                        .HasColumnType("double");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParametersSamplingResultsId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("SamplingPlace")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("AmbientAirParametersResults");
                });

            modelBuilder.Entity("Core.Entities.ChemicalPropertiesParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WastewaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("WastewaterId");

                    b.ToTable("ChemicalPropertiesParameters");
                });

            modelBuilder.Entity("Core.Entities.ChimneyParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AmbientPressure")
                        .HasColumnType("double");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double?>("DioxideCarbonVolumePercentage")
                        .HasColumnType("double");

                    b.Property<double?>("DryConditionDensity")
                        .HasColumnType("double");

                    b.Property<double?>("DynamicPressure")
                        .HasColumnType("double");

                    b.Property<double?>("EnergyLoss")
                        .HasColumnType("double");

                    b.Property<double?>("EntryPointElevation")
                        .HasColumnType("double");

                    b.Property<double?>("ExtraAirVolumePercentage")
                        .HasColumnType("double");

                    b.Property<double?>("GasOutletDebi")
                        .HasColumnType("double");

                    b.Property<double?>("InnerDiameter")
                        .HasColumnType("double");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<double?>("MeasurementDuration")
                        .HasColumnType("double");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("OutputGasSpeed")
                        .HasColumnType("double");

                    b.Property<double?>("OxygenVolumePercentage")
                        .HasColumnType("double");

                    b.Property<int>("ParametersSamplingResultsId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<double?>("RelativeHumidity")
                        .HasColumnType("double");

                    b.Property<double?>("SamplingPlaceElevation")
                        .HasColumnType("double");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double");

                    b.Property<double?>("ThermalEfficiencyPercentage")
                        .HasColumnType("double");

                    b.Property<double?>("WetConditionDensity")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("ChimneyParametersResults");
                });

            modelBuilder.Entity("Core.Entities.ChimneysInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Diameter")
                        .HasColumnType("double");

                    b.Property<double?>("Elevation")
                        .HasColumnType("double");

                    b.Property<bool?>("HasSamplingGate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsStandardConditionsObserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ReleasePollutionSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("ReleasePollutionSourceId");

                    b.ToTable("ChimneysInfo");
                });

            modelBuilder.Entity("Core.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("AnswerDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("AnswerSatisfaction")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("AnswerStartPendingDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("ComplaintDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ComplaintRegion")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeputyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("OfficeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeputyId");

                    b.HasIndex("DocumentFileNameId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OfficeGroupId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StateId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Core.Entities.ConsumingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CmConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DailyAverageProduction")
                        .HasColumnType("int");

                    b.Property<int?>("DapProductionId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBeenImported")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HsCodeId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChemical")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<int?>("MapProductionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthlyAverageProduction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RotterdamConventionChemicalId")
                        .HasColumnType("int");

                    b.Property<int?>("YapProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyAverageProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("RotterdamConventionChemicalId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("ConsumingMaterials");
                });

            modelBuilder.Entity("Core.Entities.DisinfectionDevicesInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActiveDisinfectionDevicesTotalRealCapacity")
                        .HasColumnType("int");

                    b.Property<string>("AdmDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("AgentForRepairingDevice")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("AlternativeDisinfectionMethodId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DdoDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeviceFailureRatePerYear")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceInActivityCauseId")
                        .HasColumnType("int");

                    b.Property<string>("DiacDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("DisinfectionDeviceOwnershipId")
                        .HasColumnType("int");

                    b.Property<int?>("DisinfectionDeviceTimeDuration")
                        .HasColumnType("int");

                    b.Property<int?>("DisinfectionMethodId")
                        .HasColumnType("int");

                    b.Property<string>("DmDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("DoingCalibrationPerYear")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InstalledWasteDisinfectionDevicesModel")
                        .HasColumnType("longtext");

                    b.Property<string>("InstalledWasteDisinfectionDevicesName")
                        .HasColumnType("longtext");

                    b.Property<int>("MedicalCenterUnitsInfoId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("ProcessRegistrationFeatures")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SleepRateAfterEachFailurePerDay")
                        .HasColumnType("int");

                    b.Property<int?>("TrainedOperatorsQuantity")
                        .HasColumnType("int");

                    b.Property<bool?>("UsingBiologicalIndicators")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UsingChemicalIndicators")
                        .HasColumnType("int");

                    b.Property<int?>("WasteDisinfectionDeviceInstallationDate")
                        .HasColumnType("int");

                    b.Property<bool?>("WasteInfectionProductionDeviceFitsCapacity")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("WorkingCycleQuantity")
                        .HasColumnType("int");

                    b.Property<bool?>("WorkingGuidePapers")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeDisinfectionMethodId");

                    b.HasIndex("DeviceInActivityCauseId");

                    b.HasIndex("DisinfectionDeviceOwnershipId");

                    b.HasIndex("DisinfectionMethodId");

                    b.HasIndex("MedicalCenterUnitsInfoId")
                        .IsUnique();

                    b.ToTable("DisinfectionDevicesInfos");
                });

            modelBuilder.Entity("Core.Entities.EnergyConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("EcAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("EcSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("EcSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("EcSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("EcWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GcAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GcSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GcSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("GcSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("GcWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GlcAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GlcSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GlcSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("GlcSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("GlcWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<bool>("HasElectricityConsumption")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasGasConsumption")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasGasolineConsumption")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMazutConsumption")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("McAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("McSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("McSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("McSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("McWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("EnergyConsumptions");
                });

            modelBuilder.Entity("Core.Entities.EnumData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SortKey")
                        .HasColumnType("int");

                    b.Property<int>("SystemType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Data");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title");

                    b.ToTable("EnumData");
                });

            modelBuilder.Entity("Core.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AttachmentsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CalibrationLicensePhotoFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("CalibrationPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentPhotoFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("FaultyCause")
                        .HasColumnType("longtext");

                    b.Property<string>("FaultyCauseDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeviceHealthy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int?>("LastCalibrationDate")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SerialCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("SpecialtySectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationLicensePhotoFileNameId");

                    b.HasIndex("CalibrationPeriodId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("EquipmentPhotoFileNameId");

                    b.HasIndex("LabId");

                    b.HasIndex("SpecialtySectionId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Core.Entities.ExperimentParametersClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IndustrialUnitsSamplingResultId")
                        .HasColumnType("int");

                    b.Property<int>("ParamClassificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("ParamClassificationId");

                    b.ToTable("ExperimentParametersClassifications");
                });

            modelBuilder.Entity("Core.Entities.FishermanToolsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("HunterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ToolsCountryId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsModelId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HunterId");

                    b.HasIndex("ToolsCountryId");

                    b.HasIndex("ToolsModelId");

                    b.HasIndex("ToolsTypeId");

                    b.ToTable("FishermanToolsHistories");
                });

            modelBuilder.Entity("Core.Entities.GreenIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FinalSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("FinalSaveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GreenIndustryStatus")
                        .HasColumnType("int");

                    b.Property<bool?>("HasRequestForGreenIndustry")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PayBillFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<double?>("ProvinceTotalFinalScore")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ShowResultForIndustry")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("TotalFinalScore")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("PayBillFileNameId");

                    b.ToTable("GreenIndustries");
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryDescriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("DescriptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GreenIndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SystemComment")
                        .HasColumnType("longtext");

                    b.Property<string>("UserComment")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GreenIndustryId");

                    b.HasIndex("UserId");

                    b.ToTable("GreenIndustryDescriptions");
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryRelation", b =>
                {
                    b.Property<int>("EstablishmentGroupingId")
                        .HasColumnType("int");

                    b.Property<int>("UnderCriteriaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Ratio")
                        .HasColumnType("double");

                    b.Property<double?>("Score")
                        .HasColumnType("double");

                    b.Property<double?>("ScoreLimitation")
                        .HasColumnType("double");

                    b.HasKey("EstablishmentGroupingId", "UnderCriteriaId");

                    b.HasIndex("EstablishmentGroupingId");

                    b.HasIndex("UnderCriteriaId");

                    b.ToTable("GreenIndustryRelations");
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryStrategies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Cost")
                        .HasColumnType("double");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentAnalysisResult")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ExecutionOperationTechnicalDetails")
                        .HasColumnType("longtext");

                    b.Property<int>("GreenIndustryId")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OperationYear")
                        .HasColumnType("int");

                    b.Property<double?>("OrganizationExpertScore")
                        .HasColumnType("double");

                    b.Property<string>("PreviousAnalysisResult")
                        .HasColumnType("longtext");

                    b.Property<double?>("ProvinceExpertScore")
                        .HasColumnType("double");

                    b.Property<int?>("StartingYear")
                        .HasColumnType("int");

                    b.Property<int>("StrategyId")
                        .HasColumnType("int");

                    b.Property<int>("UnderCriteriaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("DocumentFileNameId");

                    b.HasIndex("GreenIndustryId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("OrganizationExpertScore");

                    b.HasIndex("ProvinceExpertScore");

                    b.HasIndex("StrategyId");

                    b.HasIndex("UnderCriteriaId");

                    b.ToTable("GreenIndustryStrategies");
                });

            modelBuilder.Entity("Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Core.Entities.GroupReceiverUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("MessageReceiverId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReceiverStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ViewDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MessageReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupReceiverUsers");
                });

            modelBuilder.Entity("Core.Entities.HospitalDisinfectionDeviceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisinfectionDeviceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("DryHeatBiologicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EliminateOtherHospitalsWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GravityAutoClaveBiologicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GravityAutoClaveClassFiveSixChemicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GravityAutoClaveGuidanceMonitoringCondition")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HospitalSamplingResultId")
                        .HasColumnType("int");

                    b.Property<bool>("HydroAutoClaveBiologicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEliminationHappenInHospital")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMonitoringCenterSite")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PreVacuumAutoClaveBiologicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PreVacuumAutoClaveBowieDickChemicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PreVacuumAutoClaveClassFiveSixChemicalIndex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PreVacuumAutoClaveGuidanceMonitoringCondition")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DisinfectionDeviceTypeId");

                    b.HasIndex("HospitalSamplingResultId")
                        .IsUnique();

                    b.ToTable("HospitalDisinfectionDeviceResults");
                });

            modelBuilder.Entity("Core.Entities.HospitalGuidanceMonitoringCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoClaveType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisinfectionDeviceResultId")
                        .HasColumnType("int");

                    b.Property<int>("GuidanceMonitoringConditionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DisinfectionDeviceResultId");

                    b.HasIndex("GuidanceMonitoringConditionId");

                    b.ToTable("HospitalGuidanceMonitoringConditions");
                });

            modelBuilder.Entity("Core.Entities.HospitalMedicalWasteStatusResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CalibrationDate")
                        .HasColumnType("int");

                    b.Property<string>("CalibrationDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ChemicalIndexType")
                        .HasColumnType("longtext");

                    b.Property<string>("ChemicalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DevicePressure")
                        .HasColumnType("double");

                    b.Property<bool>("DeviceShredderStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("DeviceTemperature")
                        .HasColumnType("double");

                    b.Property<string>("DisinfectantConcentration")
                        .HasColumnType("longtext");

                    b.Property<string>("DisinfectionDeviceCompany")
                        .HasColumnType("longtext");

                    b.Property<int>("DisinfectionDeviceLunchingDate")
                        .HasColumnType("int");

                    b.Property<string>("DisinfectionDeviceModel")
                        .HasColumnType("longtext");

                    b.Property<int>("DisinfectionDeviceStatusId")
                        .HasColumnType("int");

                    b.Property<double>("DisinfectionNonBurningDeviceSize")
                        .HasColumnType("double");

                    b.Property<bool>("DoesCollectingInSafetyBox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesCollectingInfectiousWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesCollectingRadioActiveWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesDisposingBodyParts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesKeepingChemicalMedicineWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesLabelingWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesMercuryWasteSepration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesPlasticBagsFilledThreeQuarters")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesRulesApplyToTemporaryKeepingWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesSavingDocumentsForAtLeastOneYear")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesSendingSelfDeclarationForm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesShreddingSafetyBox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesWashingWasteBuckets")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("GenotoxicWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasDeviceCalibrationDocuments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasDeviceMonitoringWasteDocuments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasEnoughSpaceAccordingToActiveBeds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasEnoughSpaceIfDisinfectionHappen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasUserToWorkWithDevice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWasteManagementOperationProgram")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWasteTemporarySavingLocation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HeavyMetalsWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<int>("HospitalSamplingResultId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDirtWasteShreddingDuringDisinfectant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisinfectionHappenToAllKindOfWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisinfectionMethodHasHealthMinisteryConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProducedWasteIdentify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationAwayOfAtmosphericFactors")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationBagsShred")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationCleanable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationCorruptionResistance")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationHasEnoughSpace")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationHasProperSewageSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationIsMoistureImpermeable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSharpWasteShreddingDuringDisinfectant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUserEducatedToWorkWithDevice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsValidationCheckingHappenWithPreVacuumAutoClave")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicineWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PathologicalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PressureVesselsWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("RadiatorWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<int>("ShredderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SterileRetentionTime")
                        .HasColumnType("longtext");

                    b.Property<bool>("UsingBiologicalIndexOnesPerMonth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UsingDisinfectantQuantity")
                        .HasColumnType("longtext");

                    b.Property<string>("UsingDisinfectantType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationDocumentFileNameId");

                    b.HasIndex("DisinfectionDeviceStatusId");

                    b.HasIndex("HospitalSamplingResultId")
                        .IsUnique();

                    b.HasIndex("ShredderTypeId");

                    b.ToTable("HospitalMedicalWasteStatusResults");
                });

            modelBuilder.Entity("Core.Entities.HospitalSamplingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentAlternativeLetterDate")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentAlternativeLetterNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentLetterDate")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentLetterNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("ExperimentReason")
                        .HasColumnType("int");

                    b.Property<string>("ExperimentReasonDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ExperimentSubject")
                        .HasColumnType("longtext");

                    b.Property<bool>("FinalSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("FinalSaveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("HasDisinfectionDevicePollution")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPollution")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasWastePollution")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HospitalContractFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMonitoringDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int>("LabManagerVerifierId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonitoringAlternativeDate")
                        .HasColumnType("int");

                    b.Property<string>("MonitoringAlternativeHour")
                        .HasColumnType("longtext");

                    b.Property<string>("MonitoringCancelingCause")
                        .HasColumnType("longtext");

                    b.Property<int?>("MonitoringDate")
                        .HasColumnType("int");

                    b.Property<string>("MonitoringHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("MonitoringPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("MonitoringYear")
                        .HasColumnType("int");

                    b.Property<bool?>("OrganizationRepresentativeAttendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationRepresentativeAttendanceFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("PollutionDescription")
                        .HasColumnType("longtext");

                    b.Property<long?>("RialVolume")
                        .HasColumnType("bigint");

                    b.Property<string>("SamplingExpertsDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FinalSave");

                    b.HasIndex("HospitalContractFileNameId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LabId");

                    b.HasIndex("LabManagerVerifierId");

                    b.HasIndex("MonitoringPeriodId");

                    b.HasIndex("OrganizationRepresentativeAttendanceFileNameId");

                    b.ToTable("HospitalSamplingResults");
                });

            modelBuilder.Entity("Core.Entities.HospitalTesterPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HospitalSamplingResultId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalSamplingResultId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("HospitalTesterPersonnels");
                });

            modelBuilder.Entity("Core.Entities.HospitalUsingFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisinfectionDeviceResultId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsingFacilitiesType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisinfectionDeviceResultId");

                    b.HasIndex("IndustryId");

                    b.ToTable("HospitalUsingFacilities");
                });

            modelBuilder.Entity("Core.Entities.HospitalUsingOtherIndustryDisinfectionDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalWasteStatusResultId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("MedicalWasteStatusResultId");

                    b.ToTable("HospitalUsingOtherIndustryDisinfectionDevices");
                });

            modelBuilder.Entity("Core.Entities.HumanResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("EveningShiftFromHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("EveningShiftPersonnelQuantity")
                        .HasColumnType("int");

                    b.Property<string>("EveningShiftToHour")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasEveningShift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMorningShift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasNightShift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasRestShift")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MorningShiftFromHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("MorningShiftPersonnelQuantity")
                        .HasColumnType("int");

                    b.Property<string>("MorningShiftToHour")
                        .HasColumnType("longtext");

                    b.Property<string>("NightShiftFromHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("NightShiftPersonnelQuantity")
                        .HasColumnType("int");

                    b.Property<string>("NightShiftToHour")
                        .HasColumnType("longtext");

                    b.Property<int>("PersonnelTotalNumber")
                        .HasColumnType("int");

                    b.Property<string>("RestShiftFromHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("RestShiftPersonnelQuantity")
                        .HasColumnType("int");

                    b.Property<string>("RestShiftToHour")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("HumanResources");
                });

            modelBuilder.Entity("Core.Entities.HuntInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AnnouncedDate")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ForeignLicenseAllowedMaximum")
                        .HasColumnType("int");

                    b.Property<double?>("ForeignLicenseFee")
                        .HasColumnType("double");

                    b.Property<int?>("FromDate")
                        .HasColumnType("int");

                    b.Property<string>("FromHour")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("HuntQuantity")
                        .HasColumnType("int");

                    b.Property<int>("HuntingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InstructionFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("InstructionNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NativeLicenseAllowedMaximum")
                        .HasColumnType("int");

                    b.Property<double?>("NativeLicenseFee")
                        .HasColumnType("double");

                    b.Property<int?>("NonNativeLicenseAllowedMaximum")
                        .HasColumnType("int");

                    b.Property<double?>("NonNativeLicenseFee")
                        .HasColumnType("double");

                    b.Property<int?>("ToDate")
                        .HasColumnType("int");

                    b.Property<string>("ToHour")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("HuntingTypeId");

                    b.HasIndex("InstructionFileNameId");

                    b.ToTable("HuntInstructions");
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionProvinceLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HuntInstructionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HuntInstructionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("HuntInstructionProvinceLimitations");
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionProvinceRegionsLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HuntInstructionProvinceLimitationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProvinceRegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HuntInstructionProvinceLimitationId");

                    b.HasIndex("ProvinceRegionId");

                    b.ToTable("HuntInstructionProvinceRegionsLimitations");
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionWeekLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayInWeekId")
                        .HasColumnType("int");

                    b.Property<int>("HuntInstructionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DayInWeekId");

                    b.HasIndex("HuntInstructionId");

                    b.ToTable("HuntInstructionWeekLimitations");
                });

            modelBuilder.Entity("Core.Entities.Hunter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AcceptedCommitmentForm")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AutomaticNationalIdentityCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BirthCertificateFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CommitmentFormFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HunterType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NationalCardFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("PhotoFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("PreviousNationalIdentityCode")
                        .HasColumnType("longtext");

                    b.Property<string>("PreviousProvinceIdentityCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("RegisterDate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BirthCertificateFileNameId");

                    b.HasIndex("CommitmentFormFileNameId");

                    b.HasIndex("NationalCardFileNameId");

                    b.HasIndex("PhotoFileNameId");

                    b.ToTable("Hunters");
                });

            modelBuilder.Entity("Core.Entities.HunterSeizedDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("longtext");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HunterViolationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("HunterViolationId");

                    b.ToTable("HunterSeizedDevices");
                });

            modelBuilder.Entity("Core.Entities.HunterViolatedSpecie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HunterViolationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SpecieId")
                        .HasColumnType("int");

                    b.Property<int>("SubSpecieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HunterViolationId");

                    b.HasIndex("SpecieId");

                    b.HasIndex("SubSpecieId");

                    b.ToTable("HunterViolatedSpecies");
                });

            modelBuilder.Entity("Core.Entities.HunterViolation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("longtext");

                    b.Property<double?>("CashPenalty")
                        .HasColumnType("double");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DaysInJail")
                        .HasColumnType("int");

                    b.Property<int?>("DeprivationDate")
                        .HasColumnType("int");

                    b.Property<string>("DeprivationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeprivationFromDate")
                        .HasColumnType("int");

                    b.Property<string>("DeprivationResult")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeprivationToDate")
                        .HasColumnType("int");

                    b.Property<int?>("DeprivationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasCashPenalty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasJail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasOtherPenalty")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HunterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthsInJail")
                        .HasColumnType("int");

                    b.Property<string>("OtherPenaltyDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("PaidLossingDescription")
                        .HasColumnType("longtext");

                    b.Property<double?>("PaidLossingQuantity")
                        .HasColumnType("double");

                    b.Property<string>("RemainedLossingDescription")
                        .HasColumnType("longtext");

                    b.Property<double?>("RemainedLossingQuantity")
                        .HasColumnType("double");

                    b.Property<string>("RuleFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("RuleNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("RuleRegisterDate")
                        .HasColumnType("int");

                    b.Property<int?>("RuleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolatedProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolatedRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolatedStateId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolationDegreeId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolationObserveDate")
                        .HasColumnType("int");

                    b.Property<int?>("ViolationStartedDate")
                        .HasColumnType("int");

                    b.Property<int?>("YearsInJail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeprivationTypeId");

                    b.HasIndex("HunterId");

                    b.HasIndex("RuleFileNameId");

                    b.HasIndex("RuleStatusId");

                    b.HasIndex("ViolatedProvinceId");

                    b.HasIndex("ViolatedRegionId");

                    b.HasIndex("ViolatedStateId");

                    b.HasIndex("ViolationDegreeId");

                    b.ToTable("HunterViolations");
                });

            modelBuilder.Entity("Core.Entities.HunterViolationPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FounderType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int>("HunterViolationId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HunterViolationId");

                    b.ToTable("HunterViolationPartners");
                });

            modelBuilder.Entity("Core.Entities.HunterViolationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HunterViolationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViolationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HunterViolationId");

                    b.HasIndex("ViolationTypeId");

                    b.ToTable("HunterViolationTypes");
                });

            modelBuilder.Entity("Core.Entities.HunterWeaponHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Caliber")
                        .HasColumnType("double");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HunterId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseIsValidFromDate")
                        .HasColumnType("int");

                    b.Property<int>("LicenseIsValidToDate")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseRegisterCityId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseRegisterProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseRegisterStateId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("WeaponCountryId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponModelId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("WeaponTransportingLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("WeaponTransportingLicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("WeaponTransportingLicenseRegisterDate")
                        .HasColumnType("int");

                    b.Property<int>("WeaponTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HunterId");

                    b.HasIndex("LicenseRegisterCityId");

                    b.HasIndex("LicenseRegisterProvinceId");

                    b.HasIndex("LicenseRegisterStateId");

                    b.HasIndex("WeaponCountryId");

                    b.HasIndex("WeaponModelId");

                    b.HasIndex("WeaponTransportingLicenseFileNameId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("HunterWeaponHistories");
                });

            modelBuilder.Entity("Core.Entities.HydrometryStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Area")
                        .HasColumnType("double");

                    b.Property<string>("ClassificationCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DataLoggerCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DifinitiveCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("GraphTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasBuildingBridge")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasBuiltBed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasDataLogger")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasElectricity")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEshel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasFloorLoadSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasHouse")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasLaminatedGraph")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPhone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasQualitative")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasQualityPollution")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasReper")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSedimentSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasTlfryk")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasWaterSampling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasWireless")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HydrometryBuilderCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("HydrometryEquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HydrometryStationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsBase")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInBorder")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LaunchingYear")
                        .HasColumnType("int");

                    b.Property<int>("MainBasinId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("ReperElevation")
                        .HasColumnType("double");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<int>("RiverRangeId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBasinId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("longtext");

                    b.Property<string>("Village")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DataLoggerCompanyId");

                    b.HasIndex("GraphTypeId");

                    b.HasIndex("HydrometryBuilderCompanyId");

                    b.HasIndex("HydrometryEquipmentTypeId");

                    b.HasIndex("HydrometryStationTypeId");

                    b.HasIndex("MainBasinId");

                    b.HasIndex("RiverId");

                    b.HasIndex("RiverRangeId");

                    b.HasIndex("SecondaryBasinId");

                    b.ToTable("HydrometryStations");
                });

            modelBuilder.Entity("Core.Entities.HydrometryStationClosedYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HydrometryStationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HydrometryStationId");

                    b.ToTable("HydrometryStationClosedYears");
                });

            modelBuilder.Entity("Core.Entities.HydrometryStationMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HydrometryStationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HydrometryStationId");

                    b.HasIndex("MonitoringFrequencyId");

                    b.HasIndex("MonitoringParameterId");

                    b.ToTable("HydrometryStationMonitorings");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyAssignedIndustries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustrialTownsSpecialtyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("IndustryName")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialTownsSpecialtyInfoId");

                    b.ToTable("IndustrialTownsSpecialtyAssignedIndustries");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentLetterDate")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentLetterNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HadAcceptedWastewater")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustrialTownsSpecialtyInfoId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RejectionDate")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialTownsSpecialtyInfoId");

                    b.HasIndex("IndustryId");

                    b.ToTable("IndustrialTownsSpecialtyDetails");
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedIndustriesQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CommitmentsFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DevelopmentPrediction")
                        .HasColumnType("longtext");

                    b.Property<string>("EstablishedIndustryMapFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("EstablishmentGroupingIds")
                        .HasColumnType("longtext");

                    b.Property<string>("EstablishmentZoningFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<float?>("FuturePredictionArea")
                        .HasColumnType("float");

                    b.Property<int>("IndustryHighestClassificationEstablished")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<float?>("InfrastructureSpace")
                        .HasColumnType("float");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UnassignedIndustriesQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentsFileNameId");

                    b.HasIndex("EstablishedIndustryMapFileNameId");

                    b.HasIndex("EstablishmentZoningFileNameId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LicenseFileNameId");

                    b.ToTable("IndustrialTownsSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.IndustrialUnitsSamplingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentAlternativeLetterDate")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentAlternativeLetterNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentLetterDate")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentLetterNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("ExperimentReason")
                        .HasColumnType("int");

                    b.Property<string>("ExperimentReasonDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ExperimentSubject")
                        .HasColumnType("longtext");

                    b.Property<bool>("FinalSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("FinalSaveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasLabPartner")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IndustryContractFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMonitoringDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int>("LabManagerVerifierId")
                        .HasColumnType("int");

                    b.Property<string>("LabPartnerContractFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("LabPartnerDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("LabPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("LabPartnerParametersIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonitoringAlternativeDate")
                        .HasColumnType("int");

                    b.Property<string>("MonitoringAlternativeHour")
                        .HasColumnType("longtext");

                    b.Property<string>("MonitoringCancelingCause")
                        .HasColumnType("longtext");

                    b.Property<int?>("MonitoringDate")
                        .HasColumnType("int");

                    b.Property<string>("MonitoringHour")
                        .HasColumnType("longtext");

                    b.Property<int?>("MonitoringPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("MonitoringYear")
                        .HasColumnType("int");

                    b.Property<bool?>("OrganizationRepresentativeAttendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationRepresentativeAttendanceFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ParametersListDescription")
                        .HasColumnType("longtext");

                    b.Property<long?>("RialVolume")
                        .HasColumnType("bigint");

                    b.Property<string>("SamplerExpertsIds")
                        .HasColumnType("longtext");

                    b.Property<string>("SamplingExpertsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("TechnicalAssistantVerifiersIds")
                        .HasColumnType("longtext");

                    b.Property<string>("TestersIds")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FinalSave");

                    b.HasIndex("IndustryContractFileNameId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LabId");

                    b.HasIndex("LabManagerVerifierId");

                    b.HasIndex("LabPartnerContractFileNameId");

                    b.HasIndex("LabPartnerId");

                    b.HasIndex("MonitoringPeriodId");

                    b.HasIndex("OrganizationRepresentativeAttendanceFileNameId");

                    b.ToTable("IndustrialUnitsSamplingResults");
                });

            modelBuilder.Entity("Core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EstablishmentGroupingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsWasteUsedAsRawMaterial")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<int?>("IsicCodeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LogoFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OperationLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<long?>("Serial")
                        .HasColumnType("bigint");

                    b.Property<int>("ValidationScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("EstablishmentGroupingId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("IsicCodeId");

                    b.HasIndex("LogoFileNameId");

                    b.HasIndex("OperationLicenseFileNameId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("Core.Entities.IndustryEnvironmentalHealthExpertReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CalibrationDate")
                        .HasColumnType("int");

                    b.Property<string>("CalibrationDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ChemicalIndexType")
                        .HasColumnType("longtext");

                    b.Property<string>("ChemicalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DevicePressure")
                        .HasColumnType("double");

                    b.Property<bool>("DeviceShredderStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("DeviceTemperature")
                        .HasColumnType("double");

                    b.Property<string>("DisinfectantConcentration")
                        .HasColumnType("longtext");

                    b.Property<string>("DisinfectionDeviceCompany")
                        .HasColumnType("longtext");

                    b.Property<int>("DisinfectionDeviceLunchingDate")
                        .HasColumnType("int");

                    b.Property<string>("DisinfectionDeviceModel")
                        .HasColumnType("longtext");

                    b.Property<int>("DisinfectionDeviceStatusId")
                        .HasColumnType("int");

                    b.Property<double>("DisinfectionNonBurningDeviceSize")
                        .HasColumnType("double");

                    b.Property<bool>("DoesCollectingInSafetyBox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesCollectingInfectiousWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesCollectingRadioActiveWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesDisposingBodyParts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesKeepingChemicalMedicineWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesLabelingWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesMercuryWasteSepration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesPlasticBagsFilledThreeQuarters")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesRulesApplyToTemporaryKeepingWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesSavingDocumentsForAtLeastOneYear")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesSendingSelfDeclarationForm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesShreddingSafetyBox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoesWashingWasteBuckets")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("GenotoxicWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasDeviceCalibrationDocuments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasDeviceMonitoringWasteDocuments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasEnoughSpaceAccordingToActiveBeds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasEnoughSpaceIfDisinfectionHappen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasUserToWorkWithDevice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWasteManagementOperationProgram")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWasteTemporarySavingLocation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HealthExpertFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("HeavyMetalsWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDirtWasteShreddingDuringDisinfectant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisinfectionHappenToAllKindOfWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisinfectionMethodHasHealthMinisteryConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProducedWasteIdentify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationAwayOfAtmosphericFactors")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationBagsShred")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationCleanable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationCorruptionResistance")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationHasEnoughSpace")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationHasProperSewageSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSavingLocationIsMoistureImpermeable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSharpWasteShreddingDuringDisinfectant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUserEducatedToWorkWithDevice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsValidationCheckingHappenWithPreVacuumAutoClave")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicineWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PathologicalWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PressureVesselsWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("RadiatorWastesManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<int>("ReportDate")
                        .HasColumnType("int");

                    b.Property<int>("ShredderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SterileRetentionTime")
                        .HasColumnType("longtext");

                    b.Property<bool>("UsingBiologicalIndexOnesPerMonth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UsingDisinfectantQuantity")
                        .HasColumnType("longtext");

                    b.Property<string>("UsingDisinfectantType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationDocumentFileNameId");

                    b.HasIndex("DisinfectionDeviceStatusId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ShredderTypeId");

                    b.ToTable("IndustryEnvironmentalHealthExpertReports");
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitmentsList")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EesDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("EnvironmentalRequirementsSpecifiedObserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ErsoDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("EstablishmentEvaluationStatus")
                        .HasColumnType("int");

                    b.Property<double?>("GreenSpaceCost")
                        .HasColumnType("double");

                    b.Property<double?>("GreenSpaceCoveringArea")
                        .HasColumnType("double");

                    b.Property<string>("GreenSpacePlacesDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasEvaluationStudies")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDevelopingGreenSpace")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LicenseDate")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RelatedExpertPersonnel")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedNonExpertPersonnel")
                        .HasColumnType("int");

                    b.Property<bool?>("SelectedAsGreenIndustryBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UnitSaleStatus")
                        .HasColumnType("int");

                    b.Property<double?>("UnitTotalArea")
                        .HasColumnType("double");

                    b.Property<int?>("WateringSystemTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("WateringSystemTypeId");

                    b.ToTable("IndustryEvaluations");
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationEnvironmentalManagementCertificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExpireDate")
                        .HasColumnType("int");

                    b.Property<int?>("ExtendedDate")
                        .HasColumnType("int");

                    b.Property<int>("IndustryEvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseExporterCompanyName")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReceiptDate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryEvaluationId");

                    b.HasIndex("LicenseTypeId");

                    b.ToTable("IndustryEvaluationEnvironmentalManagementCertificates");
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationGreenSpaceSpeciesVegetations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryEvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesVegetationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryEvaluationId");

                    b.HasIndex("SpeciesVegetationTypeId");

                    b.ToTable("IndustryEvaluationGreenSpaceSpeciesVegetations");
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationSelectedAsGreenIndustryInformations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryEvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryEvaluationId");

                    b.ToTable("IndustryEvaluationSelectedAsGreenIndustryInformations");
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationUnitSaleInformations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryEvaluationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaidForDescription")
                        .HasColumnType("longtext");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryEvaluationId");

                    b.ToTable("IndustryEvaluationUnitSaleInformations");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingMonitoringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMeasured")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringTypeQualityStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("MonitoringTypeId");

                    b.HasIndex("MonitoringTypeQualityStatusId");

                    b.ToTable("IndustryInspectingMonitoringTypes");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.ToTable("IndustryInspectingPlaces");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("InspectDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("InspectDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("InspectReasonId")
                        .HasColumnType("int");

                    b.Property<string>("InspectingAgendaFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("InspectingDate")
                        .HasColumnType("int");

                    b.Property<string>("InspectingExpertReportFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("InspectingHour")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsInspectionDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MonitoringTypesDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("WhyNotInspectionDoneDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InspectDocumentFileNameId");

                    b.HasIndex("InspectReasonId");

                    b.HasIndex("InspectingAgendaFileNameId");

                    b.HasIndex("InspectingExpertReportFileNameId");

                    b.HasIndex("MonitoringTypesDocumentFileNameId");

                    b.ToTable("IndustryInspections");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("InspectorType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Rank")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IndustryInspectionId");

                    b.ToTable("IndustryInspectors");
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasOnlineMonitoringEquipments")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("MaDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("MeasureAbility")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("NeedOnlineMonitoring")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OnlineMonitoringType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("IndustryOnlineMonitorings");
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoringEquipments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChimneysInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceFunctioningSatisfaction")
                        .HasColumnType("int");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DeviceSellerCompanyName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("DeviceSetupYear")
                        .HasColumnType("int");

                    b.Property<string>("DfsDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryOnlineMonitoringId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MonitoringDeviceSetupLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("OnlineMonitoringInformationConnectionLink")
                        .HasColumnType("longtext");

                    b.Property<int?>("OutletWastewaterId")
                        .HasColumnType("int");

                    b.Property<int?>("SamplingSystem")
                        .HasColumnType("int");

                    b.Property<int?>("SellerSupportQuality")
                        .HasColumnType("int");

                    b.Property<string>("SsqDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChimneysInfoId");

                    b.HasIndex("IndustryOnlineMonitoringId");

                    b.HasIndex("OutletWastewaterId");

                    b.ToTable("IndustryOnlineMonitoringEquipments");
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoringParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryOnlineMonitoringId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("MonitoringSystemActivityStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MsasDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("OnlineStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OnlineStatusDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryOnlineMonitoringId");

                    b.HasIndex("ParameterId");

                    b.ToTable("IndustryOnlineMonitoringParameters");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementDate")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeResultDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("CommitteeResultVote")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<bool>("FinalSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("FinalSaveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GeneralManagerDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("GeneralManagerVote")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfCountyOfficeDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("HeadOfCountyOfficeVote")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfHumanEnvironmentDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("HeadOfHumanEnvironmentVote")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfLaboratoryAdministrationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("HeadOfLaboratoryAdministrationVote")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfMonitoringDepartmentDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("HeadOfMonitoringDepartmentVote")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("LegalAssistantDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("LegalAssistantVote")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PollutionDetectionCommitteeFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalAssistantDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("TechnicalAssistantVote")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFileNameId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("PollutionDetectionCommitteeFileNameId");

                    b.HasIndex("SeasonId");

                    b.ToTable("IndustryPollutions");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IndustrialUnitsSamplingResultId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryPollutionId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryWarningId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PollutionAnnouncementReason")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("IndustryPollutionId");

                    b.HasIndex("IndustryWarningId");

                    b.ToTable("IndustryPollutionReasons");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryPollutionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PollutionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryPollutionId");

                    b.HasIndex("PollutionTypeId");

                    b.ToTable("IndustryPollutionTypes");
                });

            modelBuilder.Entity("Core.Entities.IndustryUsingOtherIndustryDisinfectionDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryEnvironmentalHealthExpertReportId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryEnvironmentalHealthExpertReportId");

                    b.HasIndex("IndustryId");

                    b.ToTable("IndustryUsingOtherIndustryDisinfectionDevices");
                });

            modelBuilder.Entity("Core.Entities.IndustryWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdministrationLetterDate")
                        .HasColumnType("int");

                    b.Property<string>("AdministrationLetterFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("AdministrationLetterNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("CommentDate")
                        .HasColumnType("int");

                    b.Property<int?>("CommittedResultPercentage")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CrpDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("FaxMailDate")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralAdministrationOpinionId")
                        .HasColumnType("int");

                    b.Property<string>("IndustryCommittedActions")
                        .HasColumnType("longtext");

                    b.Property<string>("IndustryCommittedActionsResult")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PercentageTillDate")
                        .HasColumnType("int");

                    b.Property<int?>("PossibleNextInspection")
                        .HasColumnType("int");

                    b.Property<string>("ProgressDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<int?>("WarningDate")
                        .HasColumnType("int");

                    b.Property<string>("WarningDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.HasKey("Id");

                    b.HasIndex("AdministrationLetterFileNameId");

                    b.HasIndex("GeneralAdministrationOpinionId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("WarningDocumentFileNameId");

                    b.ToTable("IndustryWarnings");
                });

            modelBuilder.Entity("Core.Entities.IndustryWarningReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IndustrialUnitsSamplingResultId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryWarningId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PreviousIndustryWarningId")
                        .HasColumnType("int");

                    b.Property<int>("WarningReason")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("IndustryInspectionId");

                    b.HasIndex("IndustryWarningId");

                    b.HasIndex("PreviousIndustryWarningId");

                    b.ToTable("IndustryWarningReasons");
                });

            modelBuilder.Entity("Core.Entities.InformationValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("DescriptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryValidationScore")
                        .HasColumnType("int");

                    b.Property<int?>("LabId")
                        .HasColumnType("int");

                    b.Property<int?>("LabValidationScore")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<bool>("Vote")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LabId");

                    b.HasIndex("UserId");

                    b.ToTable("InformationValidations");
                });

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AirSoundStartedDate")
                        .HasColumnType("int");

                    b.Property<int?>("BiologyStartedDate")
                        .HasColumnType("int");

                    b.Property<string>("ClassificationDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ClassificationDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LabArea")
                        .HasColumnType("int");

                    b.Property<int?>("LabPlatform")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("OtherActivity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OtherActivityDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnershipStatusDocumentFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("OwnershipStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicsChemistryStartedDate")
                        .HasColumnType("int");

                    b.Property<int>("ValidationScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationDocumentFileNameId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("OwnershipStatusDocumentFileNameId");

                    b.HasIndex("OwnershipStatusId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Core.Entities.LabConsumingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConsumableMaterialStandardClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("ExpirationDate")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableMaterialStandardClassificationId");

                    b.HasIndex("LabId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("LabConsumingMaterials");
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<int>("DomesticatedAnimalsClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("LivestockSpecialtyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Race")
                        .HasColumnType("longtext");

                    b.Property<double>("WeightAverage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DomesticatedAnimalsClassificationId");

                    b.HasIndex("LivestockSpecialtyInfoId");

                    b.ToTable("LivestockSpecialtyDetails");
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnimalWasteChemistryAnalyze")
                        .HasColumnType("longtext");

                    b.Property<int>("AnimalWasteHoldingDuration")
                        .HasColumnType("int");

                    b.Property<int>("AnimalWasteProductionAverage")
                        .HasColumnType("int");

                    b.Property<string>("AnimalWasteUseageMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingMapFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DistanceFromRiver")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceToMainRoad")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceToNearestAgriculturalLand")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceToNearestForageCollection")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceToNearestSlaughterhouse")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceToResidentialArea")
                        .HasColumnType("int");

                    b.Property<bool?>("HasHeatingSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HeatingSystemDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsInSensitiveCentersWindDirection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsInsideResidentialArea")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LivestockClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("MinistryOfAgricultureLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("MinistryOfIndustryLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ScwdDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SensitiveCentersAroundDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SlaughterhouseName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BuildingMapFileNameId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LivestockClassificationId");

                    b.HasIndex("MinistryOfAgricultureLicenseFileNameId");

                    b.HasIndex("MinistryOfIndustryLicenseFileNameId");

                    b.ToTable("LivestockSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.ManufacturedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DailyAverageProduction")
                        .HasColumnType("int");

                    b.Property<int?>("DapProductionId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<int?>("MapProductionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthlyAverageProduction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProductionLineIntroduction")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductionMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("ScannerBlockDiagramFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("YapProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyAverageProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("ScannerBlockDiagramFileNameId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("ManufacturedProducts");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterSelfDeclarationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AaaNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("AaaSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativeUnitsNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativeUnitsSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("AudiologistsNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("AudiologistsSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("BaoNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("BaoSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("BmtNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("BmtSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("CardiacCareNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("CardiacCareSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("CardiovascularNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("CardiovascularSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("ChemotherapyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("ChemotherapySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CtScanNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("CtScanSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("DentistryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("DentistrySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("DialysisSectionNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("DialysisSectionSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EarnoseAndThroatNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EarnoseAndThroatSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EmergencyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EmergencySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EndoscopicSectionNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("EndoscopicSectionSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralSurgeryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralSurgerySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GeneticsLaboratoryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GeneticsLaboratorySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GphNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("GphSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAdministrativeUnits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasAngiographyAndAngioplasty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasAudiologists")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasBloodAndOncology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasBoneMarrowTransplantation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCardiacCare")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCardiovascular")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasChemotherapy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCtScan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasDentistry")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasDialysisSection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEarnoseAndThroat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEndoscopicSection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasGeneralPublicHealth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasGeneralSurgery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasGeneticsLaboratory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasInfectious")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasLaundryRoom")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMedicalEquipment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMri")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNephrology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNeurology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNuclearMedicineDepartment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNutrition")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasOncology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPainAndAnesthesia")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPathologyLaboratory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPharmacy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPhysiotherapy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPsychiatry")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRadiology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRadiotherapy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSkin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSonography")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSurgery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSurgeryRoom")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("InfectiousNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("InfectiousSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("LaundryRoomNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("LaundryRoomSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalEquipmentNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalEquipmentSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MriNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("MriSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NephrologyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NephrologySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NeurologyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NeurologySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NmdNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NmdSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NutritionNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("NutritionSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("OncologyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("OncologySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PainAndAnesthesiaNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PainAndAnesthesiaSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PathologyLaboratoryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PathologyLaboratorySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PhysiotherapyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PhysiotherapySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PsychiatryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("PsychiatrySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("RadiologyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("RadiologySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("RadiotherapyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("RadiotherapySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SkinNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SkinSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SonographyNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SonographySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SurgeryNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SurgeryRoomNwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SurgeryRoomSwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.Property<int?>("SurgerySwMonthlyProductionQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MedicalCenterSelfDeclarationInfos");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsAdditionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HealthExpertGradeId")
                        .HasColumnType("int");

                    b.Property<string>("HegDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("McrtDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("McwdmDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("MedicalCenterUnitsInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalChemistryWastesDisposalMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalInfectionWastesDisposalMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalNormalWastesDisposalMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalWastesReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("MiwdmDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("MnwdmDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MunicipalityCompanyReceivedTariffId")
                        .HasColumnType("int");

                    b.Property<string>("MwrDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("Q1")
                        .HasColumnType("int");

                    b.Property<bool?>("Q10")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q11")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q12")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q13")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q14")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q15")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q16")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q17")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q18")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q19")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q20")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q21")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q22")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q23")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q24")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q25")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q26")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q27")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q28")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q29")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q30")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q31")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q32")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q33")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q34")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q35")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q36")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q37")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q38")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q39")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q4")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q40")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q41")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q42")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q43")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q44")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q45")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q46")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q47")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q48")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q49")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q5")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q50")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q51")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q52")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Q53")
                        .HasColumnType("int");

                    b.Property<int?>("Q54")
                        .HasColumnType("int");

                    b.Property<int?>("Q55")
                        .HasColumnType("int");

                    b.Property<int?>("Q56")
                        .HasColumnType("int");

                    b.Property<int?>("Q57")
                        .HasColumnType("int");

                    b.Property<int?>("Q58")
                        .HasColumnType("int");

                    b.Property<int?>("Q59")
                        .HasColumnType("int");

                    b.Property<bool?>("Q6")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Q60")
                        .HasColumnType("int");

                    b.Property<int?>("Q61")
                        .HasColumnType("int");

                    b.Property<int?>("Q62")
                        .HasColumnType("int");

                    b.Property<int?>("Q63")
                        .HasColumnType("int");

                    b.Property<int?>("Q64")
                        .HasColumnType("int");

                    b.Property<int?>("Q65")
                        .HasColumnType("int");

                    b.Property<int?>("Q66")
                        .HasColumnType("int");

                    b.Property<int?>("Q67")
                        .HasColumnType("int");

                    b.Property<int?>("Q68")
                        .HasColumnType("int");

                    b.Property<bool?>("Q69")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q7")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q70")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q71")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Q72")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Q73")
                        .HasColumnType("int");

                    b.Property<int?>("Q74")
                        .HasColumnType("int");

                    b.Property<int?>("Q75")
                        .HasColumnType("int");

                    b.Property<string>("Q76")
                        .HasColumnType("longtext");

                    b.Property<string>("Q77")
                        .HasColumnType("longtext");

                    b.Property<int?>("Q8")
                        .HasColumnType("int");

                    b.Property<bool?>("Q9")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("WasteHoldingMethodId")
                        .HasColumnType("int");

                    b.Property<string>("WhmDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HealthExpertGradeId");

                    b.HasIndex("MedicalCenterUnitsInfoId")
                        .IsUnique();

                    b.HasIndex("MedicalChemistryWastesDisposalMethodId");

                    b.HasIndex("MedicalInfectionWastesDisposalMethodId");

                    b.HasIndex("MedicalNormalWastesDisposalMethodId");

                    b.HasIndex("MedicalWastesReceiverId");

                    b.HasIndex("MunicipalityCompanyReceivedTariffId");

                    b.HasIndex("WasteHoldingMethodId");

                    b.ToTable("MedicalCenterUnitsAdditionalInfos");
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActiveBedsQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBedsQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DdsDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("DisinfectionDeviceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("McatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("McdtDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("MedicalCenterActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalCenterDependencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WasteEstimateWaysIds")
                        .HasColumnType("longtext");

                    b.Property<string>("WewDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DisinfectionDeviceStatusId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("MedicalCenterActivityTypeId");

                    b.HasIndex("MedicalCenterDependencyTypeId");

                    b.ToTable("MedicalCenterUnitsInfos");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SentDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("body")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Entities.MessageReceiver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReciverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ViewDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReceiverGroupId");

                    b.HasIndex("ReciverId");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("Core.Entities.MonitoringCoding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcceptedResourceId")
                        .HasColumnType("int");

                    b.Property<bool?>("AllIsic10s")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllIsic4s")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllIsics")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EstablishmentCode")
                        .HasColumnType("int");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IsicCode10Ids")
                        .HasColumnType("longtext");

                    b.Property<int?>("IsicCode2Id")
                        .HasColumnType("int");

                    b.Property<int?>("IsicCode4Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PollutionReleaseSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateCodingId")
                        .HasColumnType("int");

                    b.Property<int?>("WasteClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("WasteNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("IsicCode2Id");

                    b.HasIndex("IsicCode4Id");

                    b.HasIndex("MonitoringTypeId");

                    b.HasIndex("PollutionReleaseSourceId");

                    b.HasIndex("PrivateCodingId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("MonitoringCodings");
                });

            modelBuilder.Entity("Core.Entities.MonitoringInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MonitoringInfos");
                });

            modelBuilder.Entity("Core.Entities.MonitoringParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("LimitAmountQuantity")
                        .HasColumnType("double");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringCodingId")
                        .HasColumnType("int");

                    b.Property<int>("ParamClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("ParamId")
                        .HasColumnType("int");

                    b.Property<double>("PollutionLimitQuantity")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("LimitAmountQuantity");

                    b.HasIndex("MonitoringCodingId");

                    b.HasIndex("ParamClassificationId");

                    b.HasIndex("ParamId");

                    b.HasIndex("PollutionLimitQuantity");

                    b.ToTable("MonitoringParameters");
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyAdditionalInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DailySendingAverage")
                        .HasColumnType("int");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MunicipalityWasteSpecialtyInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("MunicipalityWasteSpecialtyInfoId");

                    b.ToTable("MunicipalityWasteSpecialtyAdditionalInfos");
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BuildingConstructionWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("CityPopulation")
                        .HasColumnType("int");

                    b.Property<bool?>("CollectingUnsafeMedicalWaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CoveringAreasRecyclingBoothQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("CoveringAreasStationedStorage")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IndustrialWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NotSeperatedNormalWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("SafeMedicalWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("SeperatedDryNormalWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("SeperatedWetNormalWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("UnsafeMedicalWasteDailyCollection")
                        .HasColumnType("int");

                    b.Property<int?>("WasteTransportationMachineryQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("MunicipalityWasteSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.NeedMonitoringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringInfoId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("NeedMonitoring")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("MonitoringTypeId");

                    b.ToTable("NeedMonitoringTypes");
                });

            modelBuilder.Entity("Core.Entities.NormalWasteInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContractExpirationDate")
                        .HasColumnType("int");

                    b.Property<string>("ContractFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("DailyAverageProduction")
                        .HasColumnType("double");

                    b.Property<bool?>("DepotHasRoof")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DepotLocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DltDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasContract")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HoldingWithIndustrialWastes")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HwiwDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsWasteSeparated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NormalWasteTransportFrequencyId")
                        .HasColumnType("int");

                    b.Property<bool?>("PackagingInGoodBags")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PigbDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("TemporaryDepotLocationOrTransportCar")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TemporaryHoldingStorageWithDoorQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("TemporaryHoldingStorageWithoutDoorQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TransportingCompanyName")
                        .HasColumnType("longtext");

                    b.Property<int>("WasteId")
                        .HasColumnType("int");

                    b.Property<string>("WasteTransportFinalDestination")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContractFileNameId");

                    b.HasIndex("DepotLocationTypeId");

                    b.HasIndex("NormalWasteTransportFrequencyId");

                    b.HasIndex("WasteId")
                        .IsUnique();

                    b.ToTable("NormalWasteInformations");
                });

            modelBuilder.Entity("Core.Entities.OnlineMonitoringChimneyInfosParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChimneyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryOnlineMonitoringParametersId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChimneyInfoId");

                    b.HasIndex("IndustryOnlineMonitoringParametersId");

                    b.ToTable("OnlineMonitoringChimneyInfosParameters");
                });

            modelBuilder.Entity("Core.Entities.OnlineMonitoringOutletWastewatersParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryOnlineMonitoringParametersId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OutletWastewatersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryOnlineMonitoringParametersId");

                    b.HasIndex("OutletWastewatersId");

                    b.ToTable("OnlineMonitoringOutletWastewatersParameters");
                });

            modelBuilder.Entity("Core.Entities.OutletWastewaters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcceptedResourceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("HasOutletSludge")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringInfoId")
                        .HasColumnType("int");

                    b.Property<string>("OutletDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PossibleToTakeSamplingFromOutletSludge")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WastewaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("MonitoringInfoId");

                    b.HasIndex("WastewaterId");

                    b.ToTable("OutletWastewaters");
                });

            modelBuilder.Entity("Core.Entities.ParameterAndMeasurementMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IngredientClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StandardExperimentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsingEquipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientClassificationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("LabId");

                    b.HasIndex("UsingEquipmentId");

                    b.ToTable("ParametersAndMeasurementMethods");
                });

            modelBuilder.Entity("Core.Entities.ParametersSamplingResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcceptedResourceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentsFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("EquipmentsIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("ExperimentDate")
                        .HasColumnType("int");

                    b.Property<string>("ExperimentMethod")
                        .HasColumnType("longtext");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IndustrialUnitsSamplingResultId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringParametersId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PollutionReleaseSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("SamplingDate")
                        .HasColumnType("int");

                    b.Property<int?>("WasteClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("WasteNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedResourceId");

                    b.HasIndex("DocumentsFileNameId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("IndustrialUnitsSamplingResultId");

                    b.HasIndex("MonitoringParametersId");

                    b.HasIndex("MonitoringTypeId");

                    b.HasIndex("PollutionReleaseSourceId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("ParametersSamplingResults");
                });

            modelBuilder.Entity("Core.Entities.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AirSoundJobExperience")
                        .HasColumnType("int");

                    b.Property<int?>("BiologyJobExperience")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DegreeOfEducationFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NationalCardPhotoFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("NationalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonnelHistoryFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("PhysicsChemistryJobExperience")
                        .HasColumnType("int");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.Property<bool>("isExpertInAirSound")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isExpertInBiology")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isExpertInPhysicsChemistry")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeOfEducationFileNameId");

                    b.HasIndex("GradeId");

                    b.HasIndex("LabId");

                    b.HasIndex("MajorId");

                    b.HasIndex("NationalCardPhotoFileNameId");

                    b.HasIndex("PersonnelHistoryFileNameId");

                    b.HasIndex("RankId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("HsCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DailyAverageProduction")
                        .HasColumnType("int");

                    b.Property<int?>("DapProductionId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBeenImported")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HsCodeId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChemical")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<int?>("MapProductionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthlyAverageProduction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RmConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("RotterdamConventionChemicalId")
                        .HasColumnType("int");

                    b.Property<int?>("YapProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyAverageProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DapProductionId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("MapProductionId");

                    b.HasIndex("RotterdamConventionChemicalId");

                    b.HasIndex("YapProductionId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Core.Entities.RefinerySendingGasType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RefinerySpecialtyInfoId")
                        .HasColumnType("int");

                    b.Property<int>("SendingGasTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RefinerySpecialtyInfoId");

                    b.HasIndex("SendingGasTypeId");

                    b.ToTable("RefinerySendingGasTypes");
                });

            modelBuilder.Entity("Core.Entities.RefinerySpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CameraViewLink")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FlareOutputTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("FlareTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FuelPitDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("FuelPitQuantity")
                        .HasColumnType("int");

                    b.Property<bool?>("HasCamera")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasFuelPit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasOutputFlare")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HoldingDataTimeCycle")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("SendingGasToFlareQuantity")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("FlareTypeId");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("RefinerySpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("FireAlarm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FireFight")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ImpermeableRoof")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ImpermeableRoofless")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("MaintainableMaterialClassificationIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RlessUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<double>("RoofArea")
                        .HasColumnType("double");

                    b.Property<int?>("RoofStorageSize")
                        .HasColumnType("int");

                    b.Property<double>("RooflessArea")
                        .HasColumnType("double");

                    b.Property<int?>("RooflessStorageSize")
                        .HasColumnType("int");

                    b.Property<int?>("RssUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<bool>("StandardEquipment")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("RlessUnitMeasurementId");

                    b.HasIndex("RssUnitMeasurementId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Core.Entities.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("DebiPerYearAverage")
                        .HasColumnType("double");

                    b.Property<string>("FinalSource")
                        .HasColumnType("longtext");

                    b.Property<string>("FinalSourceLatitude")
                        .HasColumnType("longtext");

                    b.Property<string>("FinalSourceLongitude")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsInBorder")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Length")
                        .HasColumnType("double");

                    b.Property<int>("MainBasinId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Origin")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginLatitude")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginLongitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Polyline")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainBasinId");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("Core.Entities.RiverPassingCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RiverProvinceRangeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RiverProvinceRangeId");

                    b.ToTable("RiverPassingCities");
                });

            modelBuilder.Entity("Core.Entities.RiverPassingProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RiverId");

                    b.ToTable("RiverPassingProvinces");
                });

            modelBuilder.Entity("Core.Entities.RiverProvinceRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("DebiPerYearAverageInProvince")
                        .HasColumnType("double");

                    b.Property<double?>("DeterminedRightOfWaterAmount")
                        .HasColumnType("double");

                    b.Property<string>("FinalSourceInProvince")
                        .HasColumnType("longtext");

                    b.Property<string>("FinalSourceLatitudeInProvince")
                        .HasColumnType("longtext");

                    b.Property<string>("FinalSourceLongitudeInProvince")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsProtectedInProvince")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginInProvince")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginLatitudeInProvince")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginLongitudeInProvince")
                        .HasColumnType("longtext");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<double?>("RiverLengthInProvince")
                        .HasColumnType("double");

                    b.Property<double?>("RiverRankingInProvince")
                        .HasColumnType("double");

                    b.Property<double?>("UnboundRightOfWaterAmount")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RiverId");

                    b.ToTable("RiverProvinceRanges");
                });

            modelBuilder.Entity("Core.Entities.RiverSecondaryBasin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBasinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiverId");

                    b.HasIndex("SecondaryBasinId");

                    b.ToTable("RiverSecondaryBasins");
                });

            modelBuilder.Entity("Core.Entities.RiverUsageTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<int>("RiverUsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiverId");

                    b.HasIndex("RiverUsageTypeId");

                    b.ToTable("RiverUsageTypes");
                });

            modelBuilder.Entity("Core.Entities.RiverUsageTypesInProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RiverProvinceRangeId")
                        .HasColumnType("int");

                    b.Property<int>("RiverUsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiverProvinceRangeId");

                    b.HasIndex("RiverUsageTypeId");

                    b.ToTable("RiverUsageTypesInProvinces");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Core.Entities.RotterdamConventionChemical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Classification")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RiskIdentificationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Tag")
                        .HasColumnType("longtext");

                    b.Property<string>("UnIdentityNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RotterdamConventionChemicals");
                });

            modelBuilder.Entity("Core.Entities.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<byte[]>("UserSignature")
                        .HasColumnType("blob");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("Core.Entities.SlaughterHouseSpecialtyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BctDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("BmppuDescription")
                        .HasColumnType("longtext");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DistanceFromCity")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceFromRiver")
                        .HasColumnType("int");

                    b.Property<string>("FcnDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("HasBloodCollectionTank")
                        .HasColumnType("int");

                    b.Property<int?>("HasBloodMeatPowderProductionUnit")
                        .HasColumnType("int");

                    b.Property<int?>("HasFloorChannelsNetwork")
                        .HasColumnType("int");

                    b.Property<int?>("HasLivestockLossesWell")
                        .HasColumnType("int");

                    b.Property<int?>("HasQuarantineUnit")
                        .HasColumnType("int");

                    b.Property<int?>("HasRespectiveBloodDirectionChannel")
                        .HasColumnType("int");

                    b.Property<int?>("HasSeparationCleaningViscera")
                        .HasColumnType("int");

                    b.Property<int?>("HasSeparationRecyclingBlood")
                        .HasColumnType("int");

                    b.Property<int?>("HasWasteBakingUnit")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsInSensitiveCentersWindDirection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsInsideCity")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LandTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LlwDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("MinistryOfAgricultureLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("MinistryOfIndustryLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QuDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("RbdcDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ScvDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ScwdDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SensitiveSitesAroundSlaughterhouse")
                        .HasColumnType("longtext");

                    b.Property<int>("SlaughterHouseClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("SrbDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("WbuDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LandTypeId");

                    b.HasIndex("MinistryOfAgricultureLicenseFileNameId");

                    b.HasIndex("MinistryOfIndustryLicenseFileNameId");

                    b.HasIndex("SlaughterHouseClassificationId");

                    b.ToTable("SlaughterHouseSpecialtyInfos");
                });

            modelBuilder.Entity("Core.Entities.SoundAndWavesParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DayOrNight")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParametersSamplingResultsId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("SamplingPlace")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("SoundAndWavesParametersResults");
                });

            modelBuilder.Entity("Core.Entities.TemplateManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentBody")
                        .HasColumnType("longtext");

                    b.Property<string>("ContentTitle")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormatedToHtmlContentBody")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TemplateManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TemplateType = 2,
                            Title = "تایید مجوز نقل و انتقال پسماند"
                        },
                        new
                        {
                            Id = 2,
                            TemplateType = 3,
                            Title = "لغو مجوز نقل و انتقال پسماند"
                        },
                        new
                        {
                            Id = 3,
                            TemplateType = 4,
                            Title = "ایمیل خوش آمدگویی"
                        },
                        new
                        {
                            Id = 4,
                            TemplateType = 5,
                            Title = "ایمیل تایید حساب کاربری"
                        },
                        new
                        {
                            Id = 5,
                            TemplateType = 6,
                            Title = "پیام خوش آمدید میز کار"
                        },
                        new
                        {
                            Id = 6,
                            TemplateType = 7,
                            Title = "اعلام آلایندگی مرکز"
                        },
                        new
                        {
                            Id = 7,
                            TemplateType = 8,
                            Title = "صدور اخطاریه مرکز"
                        },
                        new
                        {
                            Id = 8,
                            TemplateType = 9,
                            Title = "فعالسازی حساب کاربری"
                        });
                });

            modelBuilder.Entity("Core.Entities.Upload", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("AccessId")
                        .HasColumnType("longtext");

                    b.Property<string>("AccessName")
                        .HasColumnType("longtext");

                    b.Property<uint>("Crc32")
                        .HasColumnType("int unsigned");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("longtext");

                    b.Property<string>("TempFileName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LastLoggedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("MobileVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImgFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AccessTokenHash")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshTokenIdHash")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Core.Entities.Waste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AqUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWasteRecyclingInUnit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IwriuDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("MethodDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProduceFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProducedWasteLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("RealMountlyProduction")
                        .HasColumnType("int");

                    b.Property<int?>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<int?>("RmpUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("VirtualMountlyProduction")
                        .HasColumnType("int");

                    b.Property<int?>("VmpUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("WasteCodingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AqUnitMeasurementId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ProduceFrequencyId");

                    b.HasIndex("ProducedWasteLocationId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("RmpUnitMeasurementId");

                    b.HasIndex("VmpUnitMeasurementId");

                    b.HasIndex("WasteCodingId");

                    b.ToTable("Wastes");
                });

            modelBuilder.Entity("Core.Entities.WasteCoding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllIsic4s")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllIsics")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BaselABId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HsCodeId")
                        .HasColumnType("int");

                    b.Property<int>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<int?>("IsicCode2Id")
                        .HasColumnType("int");

                    b.Property<int?>("IsicCode4Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PrivateCodingId")
                        .HasColumnType("int");

                    b.Property<string>("WasteBaselHIds")
                        .HasColumnType("longtext");

                    b.Property<string>("WasteBaselRDIds")
                        .HasColumnType("longtext");

                    b.Property<string>("WasteBaselYIds")
                        .HasColumnType("longtext");

                    b.Property<int>("WasteClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("WasteNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaselABId");

                    b.HasIndex("HsCodeId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("IsicCode2Id");

                    b.HasIndex("IsicCode4Id");

                    b.HasIndex("PrivateCodingId");

                    b.HasIndex("WasteClassificationId");

                    b.HasIndex("WasteNameId");

                    b.ToTable("WasteCodings");
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HcUnitMeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("HoldingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("IsicCode10Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationalProcessIds")
                        .HasColumnType("longtext");

                    b.Property<int>("OverallCapacityOperationLicense")
                        .HasColumnType("int");

                    b.Property<string>("RemainedWasteManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("UomDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("UsingEquipments")
                        .HasColumnType("longtext");

                    b.Property<bool?>("UsingOtherMaterial")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WasteManagementUnitsInfoId")
                        .HasColumnType("int");

                    b.Property<bool?>("WasteRemainAfterOperationalProccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WasteResultAfterOperationalProccess")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkingMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("WraopDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HcUnitMeasurementId");

                    b.HasIndex("IsicCode10Id");

                    b.HasIndex("WasteManagementUnitsInfoId");

                    b.ToTable("WasteManagementUnitsDetails");
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("LastApprovalDate")
                        .HasColumnType("int");

                    b.Property<string>("LastLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WasteManagementUnitClassificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.HasIndex("LastLicenseFileNameId");

                    b.HasIndex("WasteManagementUnitClassificationId");

                    b.ToTable("WasteManagementUnitsInfos");
                });

            modelBuilder.Entity("Core.Entities.WasteParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParamClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("ParamId")
                        .HasColumnType("int");

                    b.Property<int>("WasteCodingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParamClassificationId");

                    b.HasIndex("ParamId");

                    b.HasIndex("WasteCodingId");

                    b.ToTable("WasteParameter");
                });

            modelBuilder.Entity("Core.Entities.WasteParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParametersSamplingResultsId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("VisualSpecs")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("WasteParametersResults");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostDeadlineDate")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("RecieverIndustryId")
                        .HasColumnType("int");

                    b.Property<int>("SenderIndustryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransferRequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransportationVehicle")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("WasteAnalysisFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("WasteAnalysisResultFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int>("WasteId")
                        .HasColumnType("int");

                    b.Property<int?>("WasteTransferPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("WasteTransferStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("RecieverIndustryId");

                    b.HasIndex("SenderIndustryId");

                    b.HasIndex("WasteAnalysisFileNameId");

                    b.HasIndex("WasteAnalysisResultFileNameId");

                    b.HasIndex("WasteId");

                    b.HasIndex("WasteTransferPeriodId");

                    b.ToTable("WasteTransfers");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersAdditionalIndustries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WasteTransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersAdditionalIndustries");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersDescriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("DescriptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DescriptionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SystemComment")
                        .HasColumnType("longtext");

                    b.Property<string>("UserComment")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext");

                    b.Property<int>("WasteTransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersDescriptions");
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersRelatedProvinces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("WasteTransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WasteTransferId");

                    b.ToTable("WasteTransfersRelatedProvinces");
                });

            modelBuilder.Entity("Core.Entities.WastesShipments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BarSealNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CarGpsNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CarNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("EliminationFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<int?>("EliminationPossibleStartDate")
                        .HasColumnType("int");

                    b.Property<string>("HazardousMaterialTransportingLicenseFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<double?>("LoadedWeight")
                        .HasColumnType("double");

                    b.Property<string>("LoadingSupervisionAgendaFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("RoadAccidentCommitment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RoadTransportRegulationsObserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("SealValidation")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ShipmentDate")
                        .HasColumnType("int");

                    b.Property<string>("SupervisionOverDischargeFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("WasteManagementMethod")
                        .HasColumnType("longtext");

                    b.Property<int?>("WasteReceivedDate")
                        .HasColumnType("int");

                    b.Property<int>("WasteTransferId")
                        .HasColumnType("int");

                    b.Property<string>("WasteTransferingCompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("WayBillFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.HasKey("Id");

                    b.HasIndex("EliminationFileNameId");

                    b.HasIndex("HazardousMaterialTransportingLicenseFileNameId");

                    b.HasIndex("LoadingSupervisionAgendaFileNameId");

                    b.HasIndex("SupervisionOverDischargeFileNameId");

                    b.HasIndex("WasteTransferId");

                    b.HasIndex("WayBillFileNameId");

                    b.ToTable("WastesShipments");
                });

            modelBuilder.Entity("Core.Entities.Wastewater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Bacterias")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BacteriasDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("Coliforms")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ColiformsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ColorDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DailyAverageQuantity")
                        .HasColumnType("int");

                    b.Property<int>("DailyMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<string>("DangerousPropertiesIds")
                        .HasColumnType("longtext");

                    b.Property<int>("DaqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DmqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int>("HaqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int>("HmqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int>("HourlyAverageQuantity")
                        .HasColumnType("int");

                    b.Property<int>("HourlyMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("NeedPurificationSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OpacityDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("ParasitesEgg")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParasitesEggDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("Pathogens")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PathogensDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SmellDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SolidsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("TemperatureDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("WastewaterCombinationClassificationIds")
                        .HasColumnType("longtext");

                    b.Property<string>("WastewaterEmissionUnitName")
                        .HasColumnType("longtext");

                    b.Property<int>("WastewaterProductionReleaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WastewaterPurificationSystem")
                        .HasColumnType("int");

                    b.Property<int>("WastewaterTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DaqMeasurementUnitId");

                    b.HasIndex("DmqMeasurementUnitId");

                    b.HasIndex("HaqMeasurementUnitId");

                    b.HasIndex("HmqMeasurementUnitId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("WastewaterProductionReleaseTypeId");

                    b.HasIndex("WastewaterTypeId");

                    b.ToTable("Wastewaters");
                });

            modelBuilder.Entity("Core.Entities.WastewaterDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DailyQuantityMc2")
                        .HasColumnType("int");

                    b.Property<string>("DepositAreaLatitude")
                        .HasColumnType("longtext");

                    b.Property<string>("DepositAreaLongitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NameAndDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("WastewaterDisposalMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("WastewaterDisposals");
                });

            modelBuilder.Entity("Core.Entities.WastewaterParametersResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Debi")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParametersSamplingResultsId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("VisualSpecs")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParametersSamplingResultsId");

                    b.HasIndex("Quantity");

                    b.ToTable("WastewaterParametersResults");
                });

            modelBuilder.Entity("Core.Entities.WaterConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CvAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("CvSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("CvSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("CvSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("CvWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("CwConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("GwAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("GwConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("GwSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("GwSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("GwSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("GwWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<bool>("HasCityOrVillageWater")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasGroundWater")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasSeaWater")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasSurfaceWater")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SeawAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("SeawConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("SeawSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("SeawSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("SeawSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("SeawWinterAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("SwAutumnAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("SwConsumptionPlacesIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("SwSpringAverageConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("SwSummerAverageConsumption")
                        .HasColumnType("int");

                    b.Property<string>("SwSupplySourceLocationName")
                        .HasColumnType("longtext");

                    b.Property<int?>("SwWinterAverageConsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique();

                    b.ToTable("WaterConsumptions");
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<int?>("ContractExpireDate")
                        .HasColumnType("int");

                    b.Property<double?>("ContractPrice")
                        .HasColumnType("double");

                    b.Property<int?>("ContractStartDate")
                        .HasColumnType("int");

                    b.Property<string>("ContractorName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContractorPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("InstallationYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LaunchingYear")
                        .HasColumnType("int");

                    b.Property<int>("MainBasinId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCompany")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("MonitoringBoard")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("NeededCostsToMeetRequirements")
                        .HasColumnType("double");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<int>("RiverRangeId")
                        .HasColumnType("int");

                    b.Property<int?>("SatisfactionLevelId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBasinId")
                        .HasColumnType("int");

                    b.Property<string>("SellerCompany")
                        .HasColumnType("longtext");

                    b.Property<int?>("StationDataSendingFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("StationKeepingStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StationModelId")
                        .HasColumnType("int");

                    b.Property<int?>("StationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StationUsageClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("WhyNotActiveDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainBasinId");

                    b.HasIndex("RiverId");

                    b.HasIndex("RiverRangeId");

                    b.HasIndex("SatisfactionLevelId");

                    b.HasIndex("SecondaryBasinId");

                    b.HasIndex("StationDataSendingFrequencyId");

                    b.HasIndex("StationModelId");

                    b.HasIndex("StationTypeId");

                    b.HasIndex("StationUsageClassificationId");

                    b.ToTable("WaterOnlineQualityMonitoringStations");
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationConsumableId")
                        .HasColumnType("int");

                    b.Property<int>("WaterOnlineQualityMonitoringStationParametersAnalyzerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationConsumableId");

                    b.HasIndex("WaterOnlineQualityMonitoringStationParametersAnalyzerId");

                    b.ToTable("WaterOnlineQualityMonitoringStationConsumables");
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationParametersAnalyzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationParameterId")
                        .HasColumnType("int");

                    b.Property<int>("WaterOnlineQualityMonitoringStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationParameterId");

                    b.HasIndex("WaterOnlineQualityMonitoringStationId");

                    b.ToTable("WaterOnlineQualityMonitoringStationParametersAnalyzers");
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationSparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StationSparePartId")
                        .HasColumnType("int");

                    b.Property<int>("WaterOnlineQualityMonitoringStationParametersAnalyzerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationSparePartId");

                    b.HasIndex("WaterOnlineQualityMonitoringStationParametersAnalyzerId");

                    b.ToTable("WaterOnlineQualityMonitoringStationSpareParts");
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Area")
                        .HasColumnType("double");

                    b.Property<string>("ClassificationCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DifinitiveCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsBase")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInBorder")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LaunchingYear")
                        .HasColumnType("int");

                    b.Property<int>("MainBasinId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<int>("RiverRangeId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBasinId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("longtext");

                    b.Property<string>("Village")
                        .HasColumnType("longtext");

                    b.Property<int?>("WaterQualityStationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainBasinId");

                    b.HasIndex("RiverId");

                    b.HasIndex("RiverRangeId");

                    b.HasIndex("SecondaryBasinId");

                    b.HasIndex("WaterQualityStationTypeId");

                    b.ToTable("WaterQualityMonitoringStations");
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStationClosedYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WaterQualityMonitoringStationId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaterQualityMonitoringStationId");

                    b.ToTable("WaterQualityMonitoringStationClosedYears");
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStationMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MonitoringFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringParameterId")
                        .HasColumnType("int");

                    b.Property<int>("WaterQualityMonitoringStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringFrequencyId");

                    b.HasIndex("MonitoringParameterId");

                    b.HasIndex("WaterQualityMonitoringStationId");

                    b.ToTable("WaterQualityMonitoringStationMonitorings");
                });

            modelBuilder.Entity("Core.Entities.WwHasPurificationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalSludgeStorageTankDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AerationPondDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AnaerobicPondsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("BalancingDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ClearerDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DailyRawSludgeOutputQuantity")
                        .HasColumnType("int");

                    b.Property<string>("DeaeratorDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("DeaeratorType")
                        .HasColumnType("longtext");

                    b.Property<string>("DisinfectionDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("DrsoqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("EvaporationPondsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("FilterationDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("FlowmeterDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("GreaseTrapDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("GreaseTrapType")
                        .HasColumnType("longtext");

                    b.Property<string>("GritChamberDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasAdditionalSludgeStorageTank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasAerationPond")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasAnaerobicPonds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasBalancing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasClearer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasDeaerator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasDisinfection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEvaporationPonds")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasFilteration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasFlowmeter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasGreaseTrap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasGritChamber")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasOutputGasWashingTank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPolyethyleneTanks")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPressFilter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasPrimarySedimentationPond")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRefinedWastewaterStorageTank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasReturningSludgePumpStation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasReverseOsmosis")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasScreen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSecondarySedimentationPond")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSepticTank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSharpMixingPond")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSlowMixingPond")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSludgeCollectionUnit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSludgeCondenser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSludgeDigester")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasSludgePurification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasWastewaterCollectionNetwork")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HoldingCompanyName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsWastedAndRecorded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ManufacturerCompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthlyRawSludgeOutputQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MrsoqMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("OutputGasWashingTankDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanSiteFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("PolyethyleneTanksDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("PolyethyleneTanksType")
                        .HasColumnType("longtext");

                    b.Property<string>("PressFilterDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("PressFilterType")
                        .HasColumnType("longtext");

                    b.Property<string>("PrimarySedimentationPondDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("PurificationQualityQuantityBasics")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PurificationSystemIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RawSludgeAnalyzeResult")
                        .HasColumnType("longtext");

                    b.Property<bool?>("RawSludgeHasDangerous")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RawSludgeHasDangerousPropertiesIds")
                        .HasColumnType("longtext");

                    b.Property<bool?>("RawSludgeNature")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefinedSludgeAnalyzeResult")
                        .HasColumnType("longtext");

                    b.Property<string>("RefinedWastewaterStorageTankDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("RefineryHydraulicPlanFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("RefineryOutputAnalyzeResult")
                        .HasColumnType("longtext");

                    b.Property<int?>("RefineryOutputAnalyzeResultDate")
                        .HasColumnType("int");

                    b.Property<string>("ReturningSludgePumpStationDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ReverseOsmosisDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ScreenDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SecondarySedimentationPondDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SepticTankDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SepticTankType")
                        .HasColumnType("longtext");

                    b.Property<string>("SharpMixingPondDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SlowMixingPondDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("SludgeCollectionMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("SludgeCollectionUnitCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SludgeCondenserDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SludgeDigesterDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SludgePurificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("SuvMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<long?>("SystemBuildCost")
                        .HasColumnType("bigint");

                    b.Property<string>("SystemEstablishedYear")
                        .HasColumnType("longtext");

                    b.Property<string>("SystemUpgradeYear")
                        .HasColumnType("longtext");

                    b.Property<int?>("SystemUsageValue")
                        .HasColumnType("int");

                    b.Property<bool?>("UsedForBiologicalFertilizer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WastewaterCollectionNetworkDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("WastewaterId")
                        .HasColumnType("int");

                    b.Property<string>("WastewaterPurificationSystemTypeIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearlyRawSludgeOutputQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("YrsoqMeasurementUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrsoqMeasurementUnitId");

                    b.HasIndex("MrsoqMeasurementUnitId");

                    b.HasIndex("PlanSiteFileNameId");

                    b.HasIndex("RefineryHydraulicPlanFileNameId");

                    b.HasIndex("SludgeCollectionMeasurementUnitId");

                    b.HasIndex("SuvMeasurementUnitId");

                    b.HasIndex("WastewaterId")
                        .IsUnique();

                    b.HasIndex("YrsoqMeasurementUnitId");

                    b.ToTable("WwHasPurificationSystems");
                });

            modelBuilder.Entity("Core.Entities.WwUseMotherPurificationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnalysisFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("ContractWithRefineryReceiverFileNameId")
                        .HasColumnType("varchar(38)")
                        .HasMaxLength(38);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepositAreaLatitude")
                        .HasColumnType("longtext");

                    b.Property<string>("DepositAreaLongitude")
                        .HasColumnType("longtext");

                    b.Property<int>("DistanceToMotherPurificationSystem")
                        .HasColumnType("int");

                    b.Property<string>("GavDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("GeneralAdministrationVote")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MotherPurificationSystemName")
                        .HasColumnType("longtext");

                    b.Property<string>("TfDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("TransmissionFrequency")
                        .HasColumnType("longtext");

                    b.Property<int>("WastewaterId")
                        .HasColumnType("int");

                    b.Property<int?>("WastewaterTransmissionMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisFileNameId");

                    b.HasIndex("ContractWithRefineryReceiverFileNameId");

                    b.HasIndex("WastewaterId")
                        .IsUnique();

                    b.ToTable("WwUseMotherPurificationSystems");
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Core.Entities.AirQualityMonitoringStation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "SatisfactionLevel")
                        .WithMany()
                        .HasForeignKey("SatisfactionLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationDataSendingFrequency")
                        .WithMany()
                        .HasForeignKey("StationDataSendingFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationModel")
                        .WithMany()
                        .HasForeignKey("StationModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationType")
                        .WithMany()
                        .HasForeignKey("StationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationUsageClassification")
                        .WithMany()
                        .HasForeignKey("StationUsageClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "StationAddress", b1 =>
                        {
                            b1.Property<int>("AirQualityMonitoringStationId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("AirQualityMonitoringStationId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("AirQualityMonitoringStation_Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AirQualityMonitoringStationId");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("AirQualityMonitoringStationId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("FullName")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("NationalCode")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.HasKey("AirQualityMonitoringStationId");

                            b1.ToTable("AirQualityMonitoringStation_Managers");

                            b1.WithOwner()
                                .HasForeignKey("AirQualityMonitoringStationId");
                        });
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationConsumable", b =>
                {
                    b.HasOne("Core.Entities.AirQualityStationParametersAnalyzer", "AirQualityStationParametersAnalyzer")
                        .WithMany("AirQualityStationConsumables")
                        .HasForeignKey("AirQualityStationParametersAnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "StationConsumable")
                        .WithMany()
                        .HasForeignKey("StationConsumableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationMeteorologicalSystem", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationMeteorologicalSystems")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "StationMeteorologicalSystem")
                        .WithMany()
                        .HasForeignKey("StationMeteorologicalSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationParametersAnalyzer", b =>
                {
                    b.HasOne("Core.Entities.AirQualityMonitoringStation", "AirQualityMonitoringStation")
                        .WithMany("AirQualityStationParametersAnalyzers")
                        .HasForeignKey("AirQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "AirQualityMonitoringStationParameter")
                        .WithMany()
                        .HasForeignKey("AirQualityMonitoringStationParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.AirQualityStationSparePart", b =>
                {
                    b.HasOne("Core.Entities.AirQualityStationParametersAnalyzer", "AirQualityStationParametersAnalyzer")
                        .WithMany("AirQualityStationSpareParts")
                        .HasForeignKey("AirQualityStationParametersAnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "StationSparePart")
                        .WithMany()
                        .HasForeignKey("StationSparePartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.AmbientAirParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("AmbientAirParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ChemicalPropertiesParameters", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithMany("ChemicalPropertiesParameters")
                        .HasForeignKey("WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ChimneyParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("ChimneyParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ChimneysInfo", b =>
                {
                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("ChimneysInfo")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ReleasePollutionSource")
                        .WithMany()
                        .HasForeignKey("ReleasePollutionSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Complaint", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Deputy")
                        .WithMany()
                        .HasForeignKey("DeputyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "DocumentFileName")
                        .WithMany()
                        .HasForeignKey("DocumentFileNameId");

                    b.HasOne("Core.Entities.User", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.EnumData", "OfficeGroup")
                        .WithMany()
                        .HasForeignKey("OfficeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ConsumingMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("ConsumingMaterials")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.RotterdamConventionChemical", "RotterdamConventionChemical")
                        .WithMany()
                        .HasForeignKey("RotterdamConventionChemicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.DisinfectionDevicesInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AlternativeDisinfectionMethod")
                        .WithMany()
                        .HasForeignKey("AlternativeDisinfectionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DeviceInActivityCause")
                        .WithMany()
                        .HasForeignKey("DeviceInActivityCauseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceOwnership")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceOwnershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DisinfectionMethod")
                        .WithMany()
                        .HasForeignKey("DisinfectionMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.MedicalCenterUnitsInfo", "MedicalCenterUnitsInfo")
                        .WithOne("DisinfectionDevicesInfo")
                        .HasForeignKey("Core.Entities.DisinfectionDevicesInfo", "MedicalCenterUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EnergyConsumption", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("EnergyConsumption")
                        .HasForeignKey("Core.Entities.EnergyConsumption", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EnumData", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Equipment", b =>
                {
                    b.HasOne("Core.Entities.Upload", "CalibrationLicensePhotoFileName")
                        .WithMany()
                        .HasForeignKey("CalibrationLicensePhotoFileNameId");

                    b.HasOne("Core.Entities.EnumData", "CalibrationPeriod")
                        .WithMany()
                        .HasForeignKey("CalibrationPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "EquipmentPhotoFileName")
                        .WithMany()
                        .HasForeignKey("EquipmentPhotoFileNameId");

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("Equipments")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SpecialtySection")
                        .WithMany()
                        .HasForeignKey("SpecialtySectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ExperimentParametersClassification", b =>
                {
                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany("ExperimentParametersClassifications")
                        .HasForeignKey("IndustrialUnitsSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ParamClassification")
                        .WithMany()
                        .HasForeignKey("ParamClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.FishermanToolsHistory", b =>
                {
                    b.HasOne("Core.Entities.Hunter", "Hunter")
                        .WithMany("ToolsHistories")
                        .HasForeignKey("HunterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ToolsCountry")
                        .WithMany()
                        .HasForeignKey("ToolsCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ToolsModel")
                        .WithMany()
                        .HasForeignKey("ToolsModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ToolsType")
                        .WithMany()
                        .HasForeignKey("ToolsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GreenIndustry", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("GreenIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "PayBillFileName")
                        .WithMany()
                        .HasForeignKey("PayBillFileNameId");
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryDescriptions", b =>
                {
                    b.HasOne("Core.Entities.GreenIndustry", "GreenIndustry")
                        .WithMany("Descriptions")
                        .HasForeignKey("GreenIndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryRelation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "EstablishmentGrouping")
                        .WithMany()
                        .HasForeignKey("EstablishmentGroupingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "UnderCriteria")
                        .WithMany()
                        .HasForeignKey("UnderCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GreenIndustryStrategies", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "DocumentFileName")
                        .WithMany()
                        .HasForeignKey("DocumentFileNameId");

                    b.HasOne("Core.Entities.GreenIndustry", "GreenIndustry")
                        .WithMany("Strategies")
                        .HasForeignKey("GreenIndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "UnderCriteria")
                        .WithMany()
                        .HasForeignKey("UnderCriteriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GroupReceiverUser", b =>
                {
                    b.HasOne("Core.Entities.MessageReceiver", "MessageReceiver")
                        .WithMany("GroupReceiverUsers")
                        .HasForeignKey("MessageReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalDisinfectionDeviceResult", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceType")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.HospitalSamplingResult", "HospitalSamplingResult")
                        .WithOne("DisinfectionDeviceResult")
                        .HasForeignKey("Core.Entities.HospitalDisinfectionDeviceResult", "HospitalSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalGuidanceMonitoringCondition", b =>
                {
                    b.HasOne("Core.Entities.HospitalDisinfectionDeviceResult", "DisinfectionDeviceResult")
                        .WithMany("GuidanceMonitoringConditions")
                        .HasForeignKey("DisinfectionDeviceResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "GuidanceMonitoringCondition")
                        .WithMany()
                        .HasForeignKey("GuidanceMonitoringConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalMedicalWasteStatusResult", b =>
                {
                    b.HasOne("Core.Entities.Upload", "CalibrationDocumentFileName")
                        .WithMany()
                        .HasForeignKey("CalibrationDocumentFileNameId");

                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceStatus")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.HospitalSamplingResult", "HospitalSamplingResult")
                        .WithOne("MedicalWasteStatusResult")
                        .HasForeignKey("Core.Entities.HospitalMedicalWasteStatusResult", "HospitalSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ShredderType")
                        .WithMany()
                        .HasForeignKey("ShredderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalSamplingResult", b =>
                {
                    b.HasOne("Core.Entities.Upload", "HospitalContractFileName")
                        .WithMany()
                        .HasForeignKey("HospitalContractFileNameId");

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("HospitalSamplingResults")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Personnel", "LabManagerVerifier")
                        .WithMany()
                        .HasForeignKey("LabManagerVerifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringPeriod")
                        .WithMany()
                        .HasForeignKey("MonitoringPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "OrganizationRepresentativeAttendanceFileName")
                        .WithMany()
                        .HasForeignKey("OrganizationRepresentativeAttendanceFileNameId");
                });

            modelBuilder.Entity("Core.Entities.HospitalTesterPersonnel", b =>
                {
                    b.HasOne("Core.Entities.HospitalSamplingResult", "HospitalSamplingResult")
                        .WithMany("Testers")
                        .HasForeignKey("HospitalSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalUsingFacility", b =>
                {
                    b.HasOne("Core.Entities.HospitalDisinfectionDeviceResult", "DisinfectionDeviceResult")
                        .WithMany("HospitalUsingFacilities")
                        .HasForeignKey("DisinfectionDeviceResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HospitalUsingOtherIndustryDisinfectionDevice", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.HospitalMedicalWasteStatusResult", "MedicalWasteStatusResult")
                        .WithMany("UsingOtherIndustryDisinfectionDevices")
                        .HasForeignKey("MedicalWasteStatusResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HumanResource", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("HumanResource")
                        .HasForeignKey("Core.Entities.HumanResource", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HuntInstruction", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AnimalType")
                        .WithMany()
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "HuntingType")
                        .WithMany()
                        .HasForeignKey("HuntingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "InstructionFileName")
                        .WithMany()
                        .HasForeignKey("InstructionFileNameId");
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionProvinceLimitation", b =>
                {
                    b.HasOne("Core.Entities.HuntInstruction", "HuntInstruction")
                        .WithMany("HuntInstructionProvinceLimitations")
                        .HasForeignKey("HuntInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionProvinceRegionsLimitation", b =>
                {
                    b.HasOne("Core.Entities.HuntInstructionProvinceLimitation", "HuntInstructionProvinceLimitation")
                        .WithMany("HuntInstructionProvinceRegionsLimitations")
                        .HasForeignKey("HuntInstructionProvinceLimitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ProvinceRegion")
                        .WithMany()
                        .HasForeignKey("ProvinceRegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HuntInstructionWeekLimitation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DayInWeek")
                        .WithMany()
                        .HasForeignKey("DayInWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.HuntInstruction", "HuntInstruction")
                        .WithMany("HuntInstructionWeekLimitations")
                        .HasForeignKey("HuntInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Hunter", b =>
                {
                    b.HasOne("Core.Entities.Upload", "BirthCertificateFileName")
                        .WithMany()
                        .HasForeignKey("BirthCertificateFileNameId");

                    b.HasOne("Core.Entities.Upload", "CommitmentFormFileName")
                        .WithMany()
                        .HasForeignKey("CommitmentFormFileNameId");

                    b.HasOne("Core.Entities.Upload", "NationalCardFileName")
                        .WithMany()
                        .HasForeignKey("NationalCardFileNameId");

                    b.HasOne("Core.Entities.Upload", "PhotoFileName")
                        .WithMany()
                        .HasForeignKey("PhotoFileNameId");

                    b.OwnsOne("Core.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("HunterId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("HunterId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Hunter_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("HunterId");

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.HunterInformation", "Information", b1 =>
                        {
                            b1.Property<int>("HunterId")
                                .HasColumnType("int");

                            b1.Property<int?>("DateOfBirth")
                                .HasColumnType("int");

                            b1.Property<string>("Faith")
                                .HasColumnType("longtext");

                            b1.Property<string>("FatherName")
                                .HasColumnType("longtext");

                            b1.Property<string>("FirstName")
                                .HasColumnType("longtext");

                            b1.Property<int?>("GradeId")
                                .HasColumnType("int");

                            b1.Property<string>("LastName")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("MaritalStatus")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("NationalCode")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ReligionId")
                                .HasColumnType("int");

                            b1.Property<bool?>("SurvivalStatus")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("HunterId");

                            b1.HasIndex("GradeId");

                            b1.HasIndex("ReligionId");

                            b1.ToTable("Hunter_Information");

                            b1.HasOne("Core.Entities.EnumData", "Grade")
                                .WithMany()
                                .HasForeignKey("GradeId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("HunterId");

                            b1.HasOne("Core.Entities.EnumData", "Religion")
                                .WithMany()
                                .HasForeignKey("ReligionId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("Core.Entities.HunterSeizedDevice", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.HunterViolation", "HunterViolation")
                        .WithMany("SeizedDevices")
                        .HasForeignKey("HunterViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HunterViolatedSpecie", b =>
                {
                    b.HasOne("Core.Entities.HunterViolation", "HunterViolation")
                        .WithMany("ViolatedSpecies")
                        .HasForeignKey("HunterViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SubSpecie")
                        .WithMany()
                        .HasForeignKey("SubSpecieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HunterViolation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DeprivationType")
                        .WithMany()
                        .HasForeignKey("DeprivationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Hunter", "Hunter")
                        .WithMany("Violations")
                        .HasForeignKey("HunterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "RuleFileName")
                        .WithMany()
                        .HasForeignKey("RuleFileNameId");

                    b.HasOne("Core.Entities.EnumData", "RuleStatus")
                        .WithMany()
                        .HasForeignKey("RuleStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ViolatedProvince")
                        .WithMany()
                        .HasForeignKey("ViolatedProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ViolatedRegion")
                        .WithMany()
                        .HasForeignKey("ViolatedRegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ViolatedState")
                        .WithMany()
                        .HasForeignKey("ViolatedStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ViolationDegree")
                        .WithMany()
                        .HasForeignKey("ViolationDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.HunterViolationPartner", b =>
                {
                    b.HasOne("Core.Entities.HunterViolation", "HunterViolation")
                        .WithMany("ViolationPartners")
                        .HasForeignKey("HunterViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HunterViolationType", b =>
                {
                    b.HasOne("Core.Entities.HunterViolation", "HunterViolation")
                        .WithMany("ViolationTypes")
                        .HasForeignKey("HunterViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ViolationType")
                        .WithMany()
                        .HasForeignKey("ViolationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HunterWeaponHistory", b =>
                {
                    b.HasOne("Core.Entities.Hunter", "Hunter")
                        .WithMany("WeaponHistories")
                        .HasForeignKey("HunterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "LicenseRegisterCity")
                        .WithMany()
                        .HasForeignKey("LicenseRegisterCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "LicenseRegisterProvince")
                        .WithMany()
                        .HasForeignKey("LicenseRegisterProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "LicenseRegisterState")
                        .WithMany()
                        .HasForeignKey("LicenseRegisterStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WeaponCountry")
                        .WithMany()
                        .HasForeignKey("WeaponCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WeaponModel")
                        .WithMany()
                        .HasForeignKey("WeaponModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "WeaponTransportingLicenseFileName")
                        .WithMany()
                        .HasForeignKey("WeaponTransportingLicenseFileNameId");

                    b.HasOne("Core.Entities.EnumData", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HydrometryStation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DataLoggerCompany")
                        .WithMany()
                        .HasForeignKey("DataLoggerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "GraphType")
                        .WithMany()
                        .HasForeignKey("GraphTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HydrometryBuilderCompany")
                        .WithMany()
                        .HasForeignKey("HydrometryBuilderCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HydrometryEquipmentType")
                        .WithMany()
                        .HasForeignKey("HydrometryEquipmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HydrometryStationType")
                        .WithMany()
                        .HasForeignKey("HydrometryStationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MainBasin")
                        .WithMany()
                        .HasForeignKey("MainBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RiverRange")
                        .WithMany()
                        .HasForeignKey("RiverRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SecondaryBasin")
                        .WithMany()
                        .HasForeignKey("SecondaryBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Core.Entities.Address", "StationAddress", b1 =>
                        {
                            b1.Property<int>("HydrometryStationId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("HydrometryStationId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("HydrometryStation_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("HydrometryStationId");

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("Core.Entities.HydrometryStationClosedYear", b =>
                {
                    b.HasOne("Core.Entities.HydrometryStation", "HydrometryStation")
                        .WithMany("ClosedYears")
                        .HasForeignKey("HydrometryStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.HydrometryStationMonitoring", b =>
                {
                    b.HasOne("Core.Entities.HydrometryStation", "HydrometryStation")
                        .WithMany("Monitorings")
                        .HasForeignKey("HydrometryStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringFrequency")
                        .WithMany()
                        .HasForeignKey("MonitoringFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringParameter")
                        .WithMany()
                        .HasForeignKey("MonitoringParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyAssignedIndustries", b =>
                {
                    b.HasOne("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustrialTownsSpecialtyInfo")
                        .WithMany("IndustrialTownsSpecialtyAssignedIndustries")
                        .HasForeignKey("IndustrialTownsSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyDetails", b =>
                {
                    b.HasOne("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustrialTownsSpecialtyInfo")
                        .WithMany("IndustrialTownsSpecialtyDetails")
                        .HasForeignKey("IndustrialTownsSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustrialTownsSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Upload", "CommitmentsFileName")
                        .WithMany()
                        .HasForeignKey("CommitmentsFileNameId");

                    b.HasOne("Core.Entities.Upload", "EstablishedIndustryMapFileName")
                        .WithMany()
                        .HasForeignKey("EstablishedIndustryMapFileNameId");

                    b.HasOne("Core.Entities.Upload", "EstablishmentZoningFileName")
                        .WithMany()
                        .HasForeignKey("EstablishmentZoningFileNameId");

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("IndustrialTownsSpecialtyInfo")
                        .HasForeignKey("Core.Entities.IndustrialTownsSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "LicenseFileName")
                        .WithMany()
                        .HasForeignKey("LicenseFileNameId");
                });

            modelBuilder.Entity("Core.Entities.IndustrialUnitsSamplingResult", b =>
                {
                    b.HasOne("Core.Entities.Upload", "IndustryContractFileName")
                        .WithMany()
                        .HasForeignKey("IndustryContractFileNameId");

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("IndustrialUnitsSamplingResults")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Personnel", "LabManagerVerifier")
                        .WithMany()
                        .HasForeignKey("LabManagerVerifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "LabPartnerContractFileName")
                        .WithMany()
                        .HasForeignKey("LabPartnerContractFileNameId");

                    b.HasOne("Core.Entities.Lab", "LabPartner")
                        .WithMany()
                        .HasForeignKey("LabPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MonitoringPeriod")
                        .WithMany()
                        .HasForeignKey("MonitoringPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "OrganizationRepresentativeAttendanceFileName")
                        .WithMany()
                        .HasForeignKey("OrganizationRepresentativeAttendanceFileNameId");
                });

            modelBuilder.Entity("Core.Entities.Industry", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "EstablishmentGrouping")
                        .WithMany()
                        .HasForeignKey("EstablishmentGroupingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode")
                        .WithMany()
                        .HasForeignKey("IsicCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "LogoFileName")
                        .WithMany()
                        .HasForeignKey("LogoFileNameId");

                    b.HasOne("Core.Entities.Upload", "OperationLicenseFileName")
                        .WithMany()
                        .HasForeignKey("OperationLicenseFileNameId");

                    b.OwnsOne("Core.Entities.Address", "CentralOfficeAddress", b1 =>
                        {
                            b1.Property<int>("IndustryId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Industry_OfficeAddresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("IndustryId");

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Address", "WorkshopAddress", b1 =>
                        {
                            b1.Property<int>("IndustryId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Industry_WorkshopAddresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("IndustryId");

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.LicenseInfo", "License", b1 =>
                        {
                            b1.Property<int>("IndustryId")
                                .HasColumnType("int");

                            b1.Property<int?>("LicenseDate")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasColumnType("longtext");

                            b1.Property<int?>("TypeNameId")
                                .HasColumnType("int");

                            b1.HasKey("IndustryId");

                            b1.HasIndex("TypeNameId");

                            b1.ToTable("Industry_License");

                            b1.WithOwner()
                                .HasForeignKey("IndustryId");

                            b1.HasOne("Core.Entities.EnumData", "TypeName")
                                .WithMany()
                                .HasForeignKey("TypeNameId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("IndustryId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("FullName")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("NationalCode")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.HasKey("IndustryId");

                            b1.ToTable("Industry_Managers");

                            b1.WithOwner()
                                .HasForeignKey("IndustryId");
                        });
                });

            modelBuilder.Entity("Core.Entities.IndustryEnvironmentalHealthExpertReport", b =>
                {
                    b.HasOne("Core.Entities.Upload", "CalibrationDocumentFileName")
                        .WithMany()
                        .HasForeignKey("CalibrationDocumentFileNameId");

                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceStatus")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("EnvironmentalHealthExpertReports")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ShredderType")
                        .WithMany()
                        .HasForeignKey("ShredderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluation", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("Evaluation")
                        .HasForeignKey("Core.Entities.IndustryEvaluation", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WateringSystemType")
                        .WithMany()
                        .HasForeignKey("WateringSystemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationEnvironmentalManagementCertificates", b =>
                {
                    b.HasOne("Core.Entities.IndustryEvaluation", "IndustryEvaluation")
                        .WithMany("EnvironmentalManagementCertificates")
                        .HasForeignKey("IndustryEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "LicenseType")
                        .WithMany()
                        .HasForeignKey("LicenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationGreenSpaceSpeciesVegetations", b =>
                {
                    b.HasOne("Core.Entities.IndustryEvaluation", "IndustryEvaluation")
                        .WithMany("GreenSpaceSpeciesVegetations")
                        .HasForeignKey("IndustryEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SpeciesVegetationType")
                        .WithMany()
                        .HasForeignKey("SpeciesVegetationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationSelectedAsGreenIndustryInformations", b =>
                {
                    b.HasOne("Core.Entities.IndustryEvaluation", "IndustryEvaluation")
                        .WithMany("SelectedAsGreenIndustryInformations")
                        .HasForeignKey("IndustryEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryEvaluationUnitSaleInformations", b =>
                {
                    b.HasOne("Core.Entities.IndustryEvaluation", "IndustryEvaluation")
                        .WithMany("UnitSaleInformations")
                        .HasForeignKey("IndustryEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingMonitoringTypes", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("InspectingMonitoringTypes")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringTypeQualityStatus")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeQualityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectingPlaces", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("Places")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryInspection", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryInspections")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "InspectDocumentFileName")
                        .WithMany()
                        .HasForeignKey("InspectDocumentFileNameId");

                    b.HasOne("Core.Entities.EnumData", "InspectReason")
                        .WithMany()
                        .HasForeignKey("InspectReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "InspectingAgendaFileName")
                        .WithMany()
                        .HasForeignKey("InspectingAgendaFileNameId");

                    b.HasOne("Core.Entities.Upload", "InspectingExpertReportFileName")
                        .WithMany()
                        .HasForeignKey("InspectingExpertReportFileNameId");

                    b.HasOne("Core.Entities.Upload", "MonitoringTypesDocumentFileName")
                        .WithMany()
                        .HasForeignKey("MonitoringTypesDocumentFileNameId");
                });

            modelBuilder.Entity("Core.Entities.IndustryInspectors", b =>
                {
                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany("Inspectors")
                        .HasForeignKey("IndustryInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoring", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("OnlineMonitorings")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoringEquipments", b =>
                {
                    b.HasOne("Core.Entities.ChimneysInfo", "ChimneysInfo")
                        .WithMany()
                        .HasForeignKey("ChimneysInfoId");

                    b.HasOne("Core.Entities.IndustryOnlineMonitoring", "IndustryOnlineMonitoring")
                        .WithMany("OnlineMonitoringEquipments")
                        .HasForeignKey("IndustryOnlineMonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.OutletWastewaters", "OutletWastewater")
                        .WithMany()
                        .HasForeignKey("OutletWastewaterId");
                });

            modelBuilder.Entity("Core.Entities.IndustryOnlineMonitoringParameters", b =>
                {
                    b.HasOne("Core.Entities.IndustryOnlineMonitoring", "IndustryOnlineMonitoring")
                        .WithMany("OnlineMonitoringParameters")
                        .HasForeignKey("IndustryOnlineMonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryPollution", b =>
                {
                    b.HasOne("Core.Entities.Upload", "DocumentFileName")
                        .WithMany()
                        .HasForeignKey("DocumentFileNameId");

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryPollutions")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "PollutionDetectionCommitteeFileName")
                        .WithMany()
                        .HasForeignKey("PollutionDetectionCommitteeFileNameId");

                    b.HasOne("Core.Entities.EnumData", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionReasons", b =>
                {
                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany()
                        .HasForeignKey("IndustrialUnitsSamplingResultId");

                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany()
                        .HasForeignKey("IndustryInspectionId");

                    b.HasOne("Core.Entities.IndustryPollution", "IndustryPollution")
                        .WithMany("PollutionReasons")
                        .HasForeignKey("IndustryPollutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.IndustryWarning", "IndustryWarning")
                        .WithMany()
                        .HasForeignKey("IndustryWarningId");
                });

            modelBuilder.Entity("Core.Entities.IndustryPollutionTypes", b =>
                {
                    b.HasOne("Core.Entities.IndustryPollution", "IndustryPollution")
                        .WithMany("PollutionTypes")
                        .HasForeignKey("IndustryPollutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "PollutionType")
                        .WithMany()
                        .HasForeignKey("PollutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IndustryUsingOtherIndustryDisinfectionDevice", b =>
                {
                    b.HasOne("Core.Entities.IndustryEnvironmentalHealthExpertReport", "IndustryEnvironmentalHealthExpertReport")
                        .WithMany("UsingOtherIndustryDisinfectionDevices")
                        .HasForeignKey("IndustryEnvironmentalHealthExpertReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.IndustryWarning", b =>
                {
                    b.HasOne("Core.Entities.Upload", "AdministrationLetterFileName")
                        .WithMany()
                        .HasForeignKey("AdministrationLetterFileNameId");

                    b.HasOne("Core.Entities.EnumData", "GeneralAdministrationOpinion")
                        .WithMany()
                        .HasForeignKey("GeneralAdministrationOpinionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("IndustryWarnings")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany()
                        .HasForeignKey("IndustryInspectionId");

                    b.HasOne("Core.Entities.Upload", "WarningDocumentFileName")
                        .WithMany()
                        .HasForeignKey("WarningDocumentFileNameId");
                });

            modelBuilder.Entity("Core.Entities.IndustryWarningReasons", b =>
                {
                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany()
                        .HasForeignKey("IndustrialUnitsSamplingResultId");

                    b.HasOne("Core.Entities.IndustryInspection", "IndustryInspection")
                        .WithMany()
                        .HasForeignKey("IndustryInspectionId");

                    b.HasOne("Core.Entities.IndustryWarning", "IndustryWarning")
                        .WithMany("WarningReasons")
                        .HasForeignKey("IndustryWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.IndustryWarning", "PreviousIndustryWarning")
                        .WithMany()
                        .HasForeignKey("PreviousIndustryWarningId");
                });

            modelBuilder.Entity("Core.Entities.InformationValidation", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("InformationValidations")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("InformationValidations")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("InformationValidations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.HasOne("Core.Entities.Upload", "ClassificationDocumentFileName")
                        .WithMany()
                        .HasForeignKey("ClassificationDocumentFileNameId");

                    b.HasOne("Core.Entities.EnumData", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "OwnershipStatusDocumentFileName")
                        .WithMany()
                        .HasForeignKey("OwnershipStatusDocumentFileNameId");

                    b.HasOne("Core.Entities.EnumData", "OwnershipStatus")
                        .WithMany()
                        .HasForeignKey("OwnershipStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "LabAddress", b1 =>
                        {
                            b1.Property<int>("LabId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("LabId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("Lab_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("LabId");

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("LabId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("FullName")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("NationalCode")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.HasKey("LabId");

                            b1.ToTable("Lab_Managers");

                            b1.WithOwner()
                                .HasForeignKey("LabId");
                        });
                });

            modelBuilder.Entity("Core.Entities.LabConsumingMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "ConsumableMaterialStandardClassification")
                        .WithMany()
                        .HasForeignKey("ConsumableMaterialStandardClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("LabConsumingMaterials")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyDetails", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DomesticatedAnimalsClassification")
                        .WithMany()
                        .HasForeignKey("DomesticatedAnimalsClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.LivestockSpecialtyInfo", "LivestockSpecialtyInfo")
                        .WithMany("LivestockSpecialtyDetails")
                        .HasForeignKey("LivestockSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.LivestockSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Upload", "BuildingMapFileName")
                        .WithMany()
                        .HasForeignKey("BuildingMapFileNameId");

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("LivestockSpecialtyInfo")
                        .HasForeignKey("Core.Entities.LivestockSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "LivestockClassification")
                        .WithMany()
                        .HasForeignKey("LivestockClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "MinistryOfAgricultureLicenseFileName")
                        .WithMany()
                        .HasForeignKey("MinistryOfAgricultureLicenseFileNameId");

                    b.HasOne("Core.Entities.Upload", "MinistryOfIndustryLicenseFileName")
                        .WithMany()
                        .HasForeignKey("MinistryOfIndustryLicenseFileNameId");
                });

            modelBuilder.Entity("Core.Entities.ManufacturedProduct", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("ManufacturedProducts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "ScannerBlockDiagramFileName")
                        .WithMany()
                        .HasForeignKey("ScannerBlockDiagramFileNameId");

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterSelfDeclarationInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MedicalCenterSelfDeclarationInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterSelfDeclarationInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsAdditionalInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HealthExpertGrade")
                        .WithMany()
                        .HasForeignKey("HealthExpertGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.MedicalCenterUnitsInfo", "MedicalCenterUnitsInfo")
                        .WithOne("MedicalCenterUnitsAdditionalInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterUnitsAdditionalInfo", "MedicalCenterUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MedicalChemistryWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalChemistryWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalInfectionWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalInfectionWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalNormalWastesDisposalMethod")
                        .WithMany()
                        .HasForeignKey("MedicalNormalWastesDisposalMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalWastesReceiver")
                        .WithMany()
                        .HasForeignKey("MedicalWastesReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MunicipalityCompanyReceivedTariff")
                        .WithMany()
                        .HasForeignKey("MunicipalityCompanyReceivedTariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteHoldingMethod")
                        .WithMany()
                        .HasForeignKey("WasteHoldingMethodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MedicalCenterUnitsInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DisinfectionDeviceStatus")
                        .WithMany()
                        .HasForeignKey("DisinfectionDeviceStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MedicalCenterUnitsInfo")
                        .HasForeignKey("Core.Entities.MedicalCenterUnitsInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MedicalCenterActivityType")
                        .WithMany()
                        .HasForeignKey("MedicalCenterActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MedicalCenterDependencyType")
                        .WithMany()
                        .HasForeignKey("MedicalCenterDependencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.HasOne("Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MessageReceiver", b =>
                {
                    b.HasOne("Core.Entities.Message", "Message")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Group", "ReceiverGroup")
                        .WithMany()
                        .HasForeignKey("ReceiverGroupId");

                    b.HasOne("Core.Entities.User", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Core.Entities.MonitoringCoding", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode2")
                        .WithMany()
                        .HasForeignKey("IsicCode2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode4")
                        .WithMany()
                        .HasForeignKey("IsicCode4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "PollutionReleaseSource")
                        .WithMany()
                        .HasForeignKey("PollutionReleaseSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "PrivateCoding")
                        .WithMany()
                        .HasForeignKey("PrivateCodingId");

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.MonitoringInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MonitoringInfo")
                        .HasForeignKey("Core.Entities.MonitoringInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MonitoringParameters", b =>
                {
                    b.HasOne("Core.Entities.MonitoringCoding", "MonitoringCoding")
                        .WithMany("MonitoringParameters")
                        .HasForeignKey("MonitoringCodingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ParamClassification")
                        .WithMany()
                        .HasForeignKey("ParamClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyAdditionalInfos", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MunicipalityWasteSpecialtyInfo", "MunicipalityWasteSpecialtyInfo")
                        .WithMany("RelatedIndustries")
                        .HasForeignKey("MunicipalityWasteSpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.MunicipalityWasteSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("MunicipalityWasteSpecialtyInfo")
                        .HasForeignKey("Core.Entities.MunicipalityWasteSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.NeedMonitoringTypes", b =>
                {
                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("NeedMonitoringTypes")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.NormalWasteInformation", b =>
                {
                    b.HasOne("Core.Entities.Upload", "ContractFileName")
                        .WithMany()
                        .HasForeignKey("ContractFileNameId");

                    b.HasOne("Core.Entities.EnumData", "DepotLocationType")
                        .WithMany()
                        .HasForeignKey("DepotLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "NormalWasteTransportFrequency")
                        .WithMany()
                        .HasForeignKey("NormalWasteTransportFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Waste", "Waste")
                        .WithOne("NormalWasteInformation")
                        .HasForeignKey("Core.Entities.NormalWasteInformation", "WasteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.OnlineMonitoringChimneyInfosParameters", b =>
                {
                    b.HasOne("Core.Entities.ChimneysInfo", "ChimneyInfo")
                        .WithMany()
                        .HasForeignKey("ChimneyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.IndustryOnlineMonitoringParameters", "IndustryOnlineMonitoringParameters")
                        .WithMany("ChimneyInfosParameters")
                        .HasForeignKey("IndustryOnlineMonitoringParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.OnlineMonitoringOutletWastewatersParameters", b =>
                {
                    b.HasOne("Core.Entities.IndustryOnlineMonitoringParameters", "IndustryOnlineMonitoringParameters")
                        .WithMany("OutletWastewatersParameters")
                        .HasForeignKey("IndustryOnlineMonitoringParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.OutletWastewaters", "OutletWastewaters")
                        .WithMany()
                        .HasForeignKey("OutletWastewatersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.OutletWastewaters", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.MonitoringInfo", "MonitoringInfo")
                        .WithMany("OutletWastewaters")
                        .HasForeignKey("MonitoringInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithMany()
                        .HasForeignKey("WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ParameterAndMeasurementMethod", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "IngredientClassification")
                        .WithMany()
                        .HasForeignKey("IngredientClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("ParametersAndMeasurementMethods")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Equipment", "UsingEquipment")
                        .WithMany("ParametersAndMeasurementMethods")
                        .HasForeignKey("UsingEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ParametersSamplingResults", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AcceptedResource")
                        .WithMany()
                        .HasForeignKey("AcceptedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "DocumentsFileName")
                        .WithMany()
                        .HasForeignKey("DocumentsFileNameId");

                    b.HasOne("Core.Entities.EnumData", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.IndustrialUnitsSamplingResult", "IndustrialUnitsSamplingResult")
                        .WithMany("ParametersSamplingResults")
                        .HasForeignKey("IndustrialUnitsSamplingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MonitoringParameters", "MonitoringParameters")
                        .WithMany()
                        .HasForeignKey("MonitoringParametersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringType")
                        .WithMany()
                        .HasForeignKey("MonitoringTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "PollutionReleaseSource")
                        .WithMany()
                        .HasForeignKey("PollutionReleaseSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Personnel", b =>
                {
                    b.HasOne("Core.Entities.Upload", "DegreeOfEducationFileName")
                        .WithMany()
                        .HasForeignKey("DegreeOfEducationFileNameId");

                    b.HasOne("Core.Entities.EnumData", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("Personnels")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "NationalCardPhotoFileName")
                        .WithMany()
                        .HasForeignKey("NationalCardPhotoFileNameId");

                    b.HasOne("Core.Entities.Upload", "PersonnelHistoryFileName")
                        .WithMany()
                        .HasForeignKey("PersonnelHistoryFileNameId");

                    b.HasOne("Core.Entities.EnumData", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Products")
                        .HasForeignKey("IndustryId");

                    b.HasOne("Core.Entities.EnumData", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RawMaterial", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DapProduction")
                        .WithMany()
                        .HasForeignKey("DapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("RawMaterials")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MapProduction")
                        .WithMany()
                        .HasForeignKey("MapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.RotterdamConventionChemical", "RotterdamConventionChemical")
                        .WithMany()
                        .HasForeignKey("RotterdamConventionChemicalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "YapProduction")
                        .WithMany()
                        .HasForeignKey("YapProductionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.RefinerySendingGasType", b =>
                {
                    b.HasOne("Core.Entities.RefinerySpecialtyInfo", "RefinerySpecialtyInfo")
                        .WithMany("RefinerySendingGasTypes")
                        .HasForeignKey("RefinerySpecialtyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SendingGasType")
                        .WithMany()
                        .HasForeignKey("SendingGasTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RefinerySpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "FlareType")
                        .WithMany()
                        .HasForeignKey("FlareTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("RefinerySpecialtyInfo")
                        .HasForeignKey("Core.Entities.RefinerySpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Repository", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Repositories")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RlessUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RlessUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "RssUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RssUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.River", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "MainBasin")
                        .WithMany()
                        .HasForeignKey("MainBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverPassingCity", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.RiverProvinceRange", "RiverProvinceRange")
                        .WithMany("PassingCities")
                        .HasForeignKey("RiverProvinceRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverPassingProvince", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.River", "River")
                        .WithMany("PassingProvinces")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverProvinceRange", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.River", "River")
                        .WithMany("ProvinceRanges")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverSecondaryBasin", b =>
                {
                    b.HasOne("Core.Entities.River", "River")
                        .WithMany("SecondaryBasins")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SecondaryBasin")
                        .WithMany()
                        .HasForeignKey("SecondaryBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverUsageTypes", b =>
                {
                    b.HasOne("Core.Entities.River", "River")
                        .WithMany("UsageTypes")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RiverUsageType")
                        .WithMany()
                        .HasForeignKey("RiverUsageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RiverUsageTypesInProvince", b =>
                {
                    b.HasOne("Core.Entities.RiverProvinceRange", "RiverProvinceRange")
                        .WithMany("UsageTypesInProvince")
                        .HasForeignKey("RiverProvinceRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RiverUsageType")
                        .WithMany()
                        .HasForeignKey("RiverUsageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RoleClaim", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Signature", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.SlaughterHouseSpecialtyInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("SlaughterHouseSpecialtyInfo")
                        .HasForeignKey("Core.Entities.SlaughterHouseSpecialtyInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "LandType")
                        .WithMany()
                        .HasForeignKey("LandTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "MinistryOfAgricultureLicenseFileName")
                        .WithMany()
                        .HasForeignKey("MinistryOfAgricultureLicenseFileNameId");

                    b.HasOne("Core.Entities.Upload", "MinistryOfIndustryLicenseFileName")
                        .WithMany()
                        .HasForeignKey("MinistryOfIndustryLicenseFileNameId");

                    b.HasOne("Core.Entities.EnumData", "SlaughterHouseClassification")
                        .WithMany()
                        .HasForeignKey("SlaughterHouseClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.SoundAndWavesParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("SoundAndWavesParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.TemplateManager", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.UserGroup", b =>
                {
                    b.HasOne("Core.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UserToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Waste", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "AqUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("AqUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Wastes")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "ProduceFrequency")
                        .WithMany()
                        .HasForeignKey("ProduceFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "ProducedWasteLocation")
                        .WithMany()
                        .HasForeignKey("ProducedWasteLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId");

                    b.HasOne("Core.Entities.EnumData", "RmpUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("RmpUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "VmpUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("VmpUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.WasteCoding", "WasteCoding")
                        .WithMany("Wastes")
                        .HasForeignKey("WasteCodingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteCoding", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "BaselAB")
                        .WithMany()
                        .HasForeignKey("BaselABId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "HsCode")
                        .WithMany()
                        .HasForeignKey("HsCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode2")
                        .WithMany()
                        .HasForeignKey("IsicCode2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "IsicCode4")
                        .WithMany()
                        .HasForeignKey("IsicCode4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "PrivateCoding")
                        .WithMany()
                        .HasForeignKey("PrivateCodingId");

                    b.HasOne("Core.Entities.EnumData", "WasteClassification")
                        .WithMany()
                        .HasForeignKey("WasteClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WasteName")
                        .WithMany()
                        .HasForeignKey("WasteNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsDetails", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "HcUnitMeasurement")
                        .WithMany()
                        .HasForeignKey("HcUnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "IsicCode10")
                        .WithMany()
                        .HasForeignKey("IsicCode10Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WasteManagementUnitsInfo", "WasteManagementUnitsInfo")
                        .WithMany("SupportedIsics10")
                        .HasForeignKey("WasteManagementUnitsInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteManagementUnitsInfo", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("WasteManagementUnit")
                        .HasForeignKey("Core.Entities.WasteManagementUnitsInfo", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "LastLicenseFileName")
                        .WithMany()
                        .HasForeignKey("LastLicenseFileNameId");

                    b.HasOne("Core.Entities.EnumData", "WasteManagementUnitClassification")
                        .WithMany()
                        .HasForeignKey("WasteManagementUnitClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteParameter", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "ParamClassification")
                        .WithMany()
                        .HasForeignKey("ParamClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "Param")
                        .WithMany()
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WasteCoding", "WasteCoding")
                        .WithMany("WasteParameters")
                        .HasForeignKey("WasteCodingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("WasteParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteTransfer", b =>
                {
                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Industry", "RecieverIndustry")
                        .WithMany()
                        .HasForeignKey("RecieverIndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "SenderIndustry")
                        .WithMany()
                        .HasForeignKey("SenderIndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "WasteAnalysisFileName")
                        .WithMany()
                        .HasForeignKey("WasteAnalysisFileNameId");

                    b.HasOne("Core.Entities.Upload", "WasteAnalysisResultFileName")
                        .WithMany()
                        .HasForeignKey("WasteAnalysisResultFileNameId");

                    b.HasOne("Core.Entities.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WasteTransferPeriod")
                        .WithMany()
                        .HasForeignKey("WasteTransferPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersAdditionalIndustries", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WasteTransfersAdditionalIndustries")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersDescriptions", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WasteTransfersDescriptions")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WasteTransfersRelatedProvinces", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("RelatedProvinces")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WastesShipments", b =>
                {
                    b.HasOne("Core.Entities.Upload", "EliminationFileName")
                        .WithMany()
                        .HasForeignKey("EliminationFileNameId");

                    b.HasOne("Core.Entities.Upload", "HazardousMaterialTransportingLicenseFileName")
                        .WithMany()
                        .HasForeignKey("HazardousMaterialTransportingLicenseFileNameId");

                    b.HasOne("Core.Entities.Upload", "LoadingSupervisionAgendaFileName")
                        .WithMany()
                        .HasForeignKey("LoadingSupervisionAgendaFileNameId");

                    b.HasOne("Core.Entities.Upload", "SupervisionOverDischargeFileName")
                        .WithMany()
                        .HasForeignKey("SupervisionOverDischargeFileNameId");

                    b.HasOne("Core.Entities.WasteTransfer", "WasteTransfer")
                        .WithMany("WastesShipments")
                        .HasForeignKey("WasteTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Upload", "WayBillFileName")
                        .WithMany()
                        .HasForeignKey("WayBillFileNameId");
                });

            modelBuilder.Entity("Core.Entities.Wastewater", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DaqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DaqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "DmqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DmqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "HaqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("HaqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "HmqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("HmqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("Wastewaters")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WastewaterProductionReleaseType")
                        .WithMany()
                        .HasForeignKey("WastewaterProductionReleaseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WastewaterType")
                        .WithMany()
                        .HasForeignKey("WastewaterTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WastewaterDisposal", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithMany("WastewaterDisposals")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WastewaterParametersResults", b =>
                {
                    b.HasOne("Core.Entities.ParametersSamplingResults", "ParametersSamplingResults")
                        .WithMany("WastewaterParametersResults")
                        .HasForeignKey("ParametersSamplingResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterConsumption", b =>
                {
                    b.HasOne("Core.Entities.Industry", "Industry")
                        .WithOne("WaterConsumption")
                        .HasForeignKey("Core.Entities.WaterConsumption", "IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "MainBasin")
                        .WithMany()
                        .HasForeignKey("MainBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RiverRange")
                        .WithMany()
                        .HasForeignKey("RiverRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SatisfactionLevel")
                        .WithMany()
                        .HasForeignKey("SatisfactionLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "SecondaryBasin")
                        .WithMany()
                        .HasForeignKey("SecondaryBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "StationDataSendingFrequency")
                        .WithMany()
                        .HasForeignKey("StationDataSendingFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationModel")
                        .WithMany()
                        .HasForeignKey("StationModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationType")
                        .WithMany()
                        .HasForeignKey("StationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "StationUsageClassification")
                        .WithMany()
                        .HasForeignKey("StationUsageClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "StationAddress", b1 =>
                        {
                            b1.Property<int>("WaterOnlineQualityMonitoringStationId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("WaterOnlineQualityMonitoringStationId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("WaterOnlineQualityMonitoringStation_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("WaterOnlineQualityMonitoringStationId");
                        });

                    b.OwnsOne("Core.Entities.Person", "Manager", b1 =>
                        {
                            b1.Property<int>("WaterOnlineQualityMonitoringStationId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("FullName")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("NationalCode")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.HasKey("WaterOnlineQualityMonitoringStationId");

                            b1.ToTable("WaterOnlineQualityMonitoringStation_Managers");

                            b1.WithOwner()
                                .HasForeignKey("WaterOnlineQualityMonitoringStationId");
                        });
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationConsumable", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "StationConsumable")
                        .WithMany()
                        .HasForeignKey("StationConsumableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WaterOnlineQualityMonitoringStationParametersAnalyzer", "WaterOnlineQualityMonitoringStationParametersAnalyzer")
                        .WithMany("WaterOnlineQualityMonitoringStationConsumables")
                        .HasForeignKey("WaterOnlineQualityMonitoringStationParametersAnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationParametersAnalyzer", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "StationParameter")
                        .WithMany()
                        .HasForeignKey("StationParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WaterOnlineQualityMonitoringStation", "WaterOnlineQualityMonitoringStation")
                        .WithMany("WaterOnlineQualityMonitoringStationParametersAnalyzers")
                        .HasForeignKey("WaterOnlineQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterOnlineQualityMonitoringStationSparePart", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "StationSparePart")
                        .WithMany()
                        .HasForeignKey("StationSparePartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WaterOnlineQualityMonitoringStationParametersAnalyzer", "WaterOnlineQualityMonitoringStationParametersAnalyzer")
                        .WithMany("WaterOnlineQualityMonitoringStationSpareParts")
                        .HasForeignKey("WaterOnlineQualityMonitoringStationParametersAnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStation", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "MainBasin")
                        .WithMany()
                        .HasForeignKey("MainBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "RiverRange")
                        .WithMany()
                        .HasForeignKey("RiverRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "SecondaryBasin")
                        .WithMany()
                        .HasForeignKey("SecondaryBasinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "WaterQualityStationType")
                        .WithMany()
                        .HasForeignKey("WaterQualityStationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Core.Entities.Address", "StationAddress", b1 =>
                        {
                            b1.Property<int>("WaterQualityMonitoringStationId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressDetails")
                                .HasColumnType("longtext");

                            b1.Property<int?>("CityId")
                                .HasColumnType("int");

                            b1.Property<int?>("DistanceToCity")
                                .HasColumnType("int");

                            b1.Property<string>("Elevation")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("IndustrialTown")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("IsInTownEnv")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Latitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Longitude")
                                .HasColumnType("longtext");

                            b1.Property<string>("Mobile")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phone")
                                .HasColumnType("longtext");

                            b1.Property<int?>("ProvinceId")
                                .HasColumnType("int");

                            b1.Property<int?>("StateId")
                                .HasColumnType("int");

                            b1.Property<string>("WebSite")
                                .HasColumnType("longtext");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("longtext");

                            b1.HasKey("WaterQualityMonitoringStationId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("ProvinceId");

                            b1.HasIndex("StateId");

                            b1.ToTable("WaterQualityMonitoringStation_Addresses");

                            b1.HasOne("Core.Entities.EnumData", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "Province")
                                .WithMany()
                                .HasForeignKey("ProvinceId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Core.Entities.EnumData", "State")
                                .WithMany()
                                .HasForeignKey("StateId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.WithOwner()
                                .HasForeignKey("WaterQualityMonitoringStationId");
                        });
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStationClosedYear", b =>
                {
                    b.HasOne("Core.Entities.WaterQualityMonitoringStation", "WaterQualityMonitoringStation")
                        .WithMany("ClosedYears")
                        .HasForeignKey("WaterQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WaterQualityMonitoringStationMonitoring", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "MonitoringFrequency")
                        .WithMany()
                        .HasForeignKey("MonitoringFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "MonitoringParameter")
                        .WithMany()
                        .HasForeignKey("MonitoringParameterId")
                        .HasConstraintName("FK_WaterQualityMonitoringStationMonitorings_EnumData_Monitorin~1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WaterQualityMonitoringStation", "WaterQualityMonitoringStation")
                        .WithMany("Monitorings")
                        .HasForeignKey("WaterQualityMonitoringStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.WwHasPurificationSystems", b =>
                {
                    b.HasOne("Core.Entities.EnumData", "DrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "MrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Upload", "PlanSiteFileName")
                        .WithMany()
                        .HasForeignKey("PlanSiteFileNameId");

                    b.HasOne("Core.Entities.Upload", "RefineryHydraulicPlanFileName")
                        .WithMany()
                        .HasForeignKey("RefineryHydraulicPlanFileNameId");

                    b.HasOne("Core.Entities.EnumData", "SludgeCollectionMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("SludgeCollectionMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EnumData", "SuvMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("SuvMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithOne("WwHasPurificationSystem")
                        .HasForeignKey("Core.Entities.WwHasPurificationSystems", "WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EnumData", "YrsoqMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("YrsoqMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WwUseMotherPurificationSystems", b =>
                {
                    b.HasOne("Core.Entities.Upload", "AnalysisFileName")
                        .WithMany()
                        .HasForeignKey("AnalysisFileNameId");

                    b.HasOne("Core.Entities.Upload", "ContractWithRefineryReceiverFileName")
                        .WithMany()
                        .HasForeignKey("ContractWithRefineryReceiverFileNameId");

                    b.HasOne("Core.Entities.Wastewater", "Wastewater")
                        .WithOne("WwUseMotherPurificationSystem")
                        .HasForeignKey("Core.Entities.WwUseMotherPurificationSystems", "WastewaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
